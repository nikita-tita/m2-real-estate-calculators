/**
 * Scenario Comparison - —Å–∏—Å—Ç–µ–º–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤ –ú2
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –¥–æ 3 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤
 */

class ScenarioComparison {
    constructor() {
        this.scenarios = new Map();
        this.maxScenarios = 3;
        this.activeComparison = null;
        this.comparisonMode = false;
        this.storage = new Map();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
     */
    init() {
        this.loadSavedScenarios();
        this.setupEventListeners();
        this.initializeUI();

        console.log('üìä –°–∏—Å—Ç–µ–º–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ "–°—Ä–∞–≤–Ω–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏"
        document.addEventListener('click', (e) => {
            if (e.target.matches('.compare-scenarios-btn')) {
                this.toggleComparisonMode();
            }

            if (e.target.matches('.add-scenario-btn')) {
                this.addCurrentScenario();
            }

            if (e.target.matches('.remove-scenario-btn')) {
                const scenarioId = e.target.dataset.scenarioId;
                this.removeScenario(scenarioId);
            }

            if (e.target.matches('.clear-scenarios-btn')) {
                this.clearAllScenarios();
            }

            if (e.target.matches('.export-comparison-btn')) {
                this.exportComparison();
            }
        });

        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        document.addEventListener('input', this.debounce((e) => {
            if (this.comparisonMode && e.target.matches('input[type="number"], input[type="range"], select')) {
                this.updateCurrentScenario();
            }
        }, 300));
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    initializeUI() {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≤ –∫–∞–∂–¥—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
        const calculators = document.querySelectorAll('.calculator-container');
        calculators.forEach(calc => this.injectComparisonUI(calc));
    }

    /**
     * –í–Ω–µ–¥—Ä–µ–Ω–∏–µ UI –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
     */
    injectComparisonUI(calculatorContainer) {
        const comparisonPanel = document.createElement('div');
        comparisonPanel.className = 'scenario-comparison-panel';
        comparisonPanel.innerHTML = `
            <div class="comparison-header">
                <h3>üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤</h3>
                <button class="compare-scenarios-btn" title="–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è">
                    <i class="feather-icon" data-feather="compare"></i>
                    –°—Ä–∞–≤–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã
                </button>
            </div>

            <div class="comparison-controls" style="display: none;">
                <div class="current-scenario">
                    <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è:</label>
                    <input type="text" id="scenario-name" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ë–∞–∑–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç" maxlength="50">
                    <button class="add-scenario-btn">
                        <i class="feather-icon" data-feather="plus"></i>
                        –î–æ–±–∞–≤–∏—Ç—å –∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é
                    </button>
                </div>

                <div class="scenarios-list">
                    <h4>–°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (${this.scenarios.size}/${this.maxScenarios}):</h4>
                    <div class="scenarios-container"></div>
                </div>

                <div class="comparison-actions">
                    <button class="export-comparison-btn" disabled>
                        <i class="feather-icon" data-feather="download"></i>
                        –≠–∫—Å–ø–æ—Ä—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    </button>
                    <button class="clear-scenarios-btn">
                        <i class="feather-icon" data-feather="trash-2"></i>
                        –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
                    </button>
                </div>
            </div>

            <div class="comparison-results" style="display: none;"></div>
        `;

        // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –ø–æ—Å–ª–µ –±–ª–æ–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        const resultsSection = calculatorContainer.querySelector('.results-section, .calculation-results');
        if (resultsSection) {
            resultsSection.after(comparisonPanel);
        } else {
            calculatorContainer.appendChild(comparisonPanel);
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏ Feather
        if (typeof feather !== 'undefined') {
            feather.replace();
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     */
    toggleComparisonMode() {
        this.comparisonMode = !this.comparisonMode;

        const controls = document.querySelector('.comparison-controls');
        const results = document.querySelector('.comparison-results');
        const button = document.querySelector('.compare-scenarios-btn');

        if (this.comparisonMode) {
            controls.style.display = 'block';
            button.innerHTML = '<i class="feather-icon" data-feather="x"></i> –ó–∞–∫—Ä—ã—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ';
            button.classList.add('active');
            this.updateScenariosDisplay();

            if (this.scenarios.size >= 2) {
                results.style.display = 'block';
                this.generateComparisonTable();
            }
        } else {
            controls.style.display = 'none';
            results.style.display = 'none';
            button.innerHTML = '<i class="feather-icon" data-feather="compare"></i> –°—Ä–∞–≤–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã';
            button.classList.remove('active');
        }

        if (typeof feather !== 'undefined') {
            feather.replace();
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é
     */
    async addCurrentScenario() {
        if (this.scenarios.size >= this.maxScenarios) {
            this.showNotification(`–ú–∞–∫—Å–∏–º—É–º ${this.maxScenarios} —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è`, 'warning');
            return;
        }

        const nameInput = document.querySelector('#scenario-name');
        const scenarioName = nameInput.value.trim() || `–°—Ü–µ–Ω–∞—Ä–∏–π ${this.scenarios.size + 1}`;

        // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        const currentParams = this.getCurrentCalculatorParams();
        if (!currentParams || Object.keys(currentParams).length === 0) {
            this.showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è', 'error');
            return;
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const results = await this.calculateScenarioResults(currentParams);

        const scenario = {
            id: this.generateScenarioId(),
            name: scenarioName,
            params: currentParams,
            results: results,
            createdAt: new Date().toISOString(),
            calculatorType: this.detectCalculatorType()
        };

        this.scenarios.set(scenario.id, scenario);
        this.saveScenarios();

        nameInput.value = '';
        this.updateScenariosDisplay();
        this.showNotification(`–°—Ü–µ–Ω–∞—Ä–∏–π "${scenarioName}" –¥–æ–±–∞–≤–ª–µ–Ω`, 'success');

        if (this.scenarios.size >= 2) {
            document.querySelector('.comparison-results').style.display = 'block';
            this.generateComparisonTable();
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞
        const exportBtn = document.querySelector('.export-comparison-btn');
        exportBtn.disabled = this.scenarios.size < 2;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
     */
    getCurrentCalculatorParams() {
        const params = {};
        const form = document.querySelector('form, .calculator-form, .input-section');

        if (!form) return null;

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è, —Å–µ–ª–µ–∫—Ç—ã –∏ —á–µ–∫–±–æ–∫—Å—ã
        const inputs = form.querySelectorAll('input[type="number"], input[type="range"], select, input[type="checkbox"]');

        inputs.forEach(input => {
            if (input.id || input.name) {
                const key = input.id || input.name;

                if (input.type === 'checkbox') {
                    params[key] = input.checked;
                } else if (input.type === 'number' || input.type === 'range') {
                    params[key] = parseFloat(input.value) || 0;
                } else {
                    params[key] = input.value;
                }
            }
        });

        return params;
    }

    /**
     * –†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è
     */
    async calculateScenarioResults(params) {
        const calculatorType = this.detectCalculatorType();

        try {
            // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
            switch (calculatorType) {
                case 'mortgage':
                    return this.calculateMortgageResults(params);
                case 'rental':
                    return this.calculateRentalResults(params);
                case 'rent-vs-buy':
                    return this.calculateRentVsBuyResults(params);
                case 'prepayment':
                    return this.calculatePrepaymentResults(params);
                default:
                    return this.calculateGenericResults(params);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è:', error);
            return { error: '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞' };
        }
    }

    /**
     * –†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–ø–æ—Ç–µ—á–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
     */
    calculateMortgageResults(params) {
        const loanAmount = params.loanAmount || 0;
        const interestRate = params.interestRate || 0;
        const loanTerm = params.loanTerm || 0;

        const monthlyRate = interestRate / 100 / 12;
        const numPayments = loanTerm * 12;

        const monthlyPayment = loanAmount * (monthlyRate * Math.pow(1 + monthlyRate, numPayments))
                             / (Math.pow(1 + monthlyRate, numPayments) - 1);

        const totalPayment = monthlyPayment * numPayments;
        const totalInterest = totalPayment - loanAmount;

        return {
            monthlyPayment: Math.round(monthlyPayment),
            totalPayment: Math.round(totalPayment),
            totalInterest: Math.round(totalInterest),
            loanAmount: loanAmount,
            effectiveRate: ((totalPayment / loanAmount - 1) * 100 / loanTerm).toFixed(2)
        };
    }

    /**
     * –†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
     */
    calculateRentalResults(params) {
        const propertyPrice = params.propertyPrice || 0;
        const monthlyRent = params.monthlyRent || 0;
        const expenses = params.expenses || 0;

        const annualRent = monthlyRent * 12;
        const netAnnualIncome = annualRent - expenses;
        const grossYield = (annualRent / propertyPrice * 100).toFixed(2);
        const netYield = (netAnnualIncome / propertyPrice * 100).toFixed(2);

        return {
            grossYield: parseFloat(grossYield),
            netYield: parseFloat(netYield),
            monthlyNetIncome: Math.round(netAnnualIncome / 12),
            annualNetIncome: Math.round(netAnnualIncome),
            roi: parseFloat(netYield)
        };
    }

    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤
     */
    calculateGenericResults(params) {
        // –ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤
        const results = {};

        Object.entries(params).forEach(([key, value]) => {
            if (typeof value === 'number' && value > 0) {
                results[key] = value;
            }
        });

        return results;
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
     */
    detectCalculatorType() {
        const url = window.location.pathname;

        if (url.includes('mortgage')) return 'mortgage';
        if (url.includes('rental')) return 'rental';
        if (url.includes('rent') && url.includes('buy')) return 'rent-vs-buy';
        if (url.includes('prepayment')) return 'prepayment';
        if (url.includes('affordability')) return 'affordability';
        if (url.includes('airbnb')) return 'airbnb';

        // –ü–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const title = document.title.toLowerCase();
        if (title.includes('–∏–ø–æ—Ç–µ–∫')) return 'mortgage';
        if (title.includes('–∞—Ä–µ–Ω–¥')) return 'rental';

        return 'generic';
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
     */
    updateScenariosDisplay() {
        const container = document.querySelector('.scenarios-container');
        if (!container) return;

        container.innerHTML = '';

        if (this.scenarios.size === 0) {
            container.innerHTML = '<p class="no-scenarios">–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤</p>';
            return;
        }

        this.scenarios.forEach(scenario => {
            const scenarioCard = document.createElement('div');
            scenarioCard.className = 'scenario-card';
            scenarioCard.innerHTML = `
                <div class="scenario-header">
                    <h5>${scenario.name}</h5>
                    <button class="remove-scenario-btn" data-scenario-id="${scenario.id}" title="–£–¥–∞–ª–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π">
                        <i class="feather-icon" data-feather="x"></i>
                    </button>
                </div>
                <div class="scenario-summary">
                    ${this.generateScenarioSummary(scenario)}
                </div>
                <div class="scenario-meta">
                    –°–æ–∑–¥–∞–Ω: ${new Date(scenario.createdAt).toLocaleDateString('ru-RU')}
                </div>
            `;

            container.appendChild(scenarioCard);
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        const header = document.querySelector('.scenarios-list h4');
        if (header) {
            header.textContent = `–°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (${this.scenarios.size}/${this.maxScenarios}):`;
        }

        if (typeof feather !== 'undefined') {
            feather.replace();
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
     */
    generateScenarioSummary(scenario) {
        const { params, results } = scenario;

        if (scenario.calculatorType === 'mortgage') {
            return `
                <div class="summary-item">–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞: ${this.formatNumber(params.loanAmount)} ‚ÇΩ</div>
                <div class="summary-item">–°—Ç–∞–≤–∫–∞: ${params.interestRate}%</div>
                <div class="summary-item">–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: ${this.formatNumber(results.monthlyPayment)} ‚ÇΩ</div>
            `;
        }

        if (scenario.calculatorType === 'rental') {
            return `
                <div class="summary-item">–°—Ç–æ–∏–º–æ—Å—Ç—å: ${this.formatNumber(params.propertyPrice)} ‚ÇΩ</div>
                <div class="summary-item">–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${results.netYield}% –≥–æ–¥–æ–≤—ã—Ö</div>
                <div class="summary-item">–î–æ—Ö–æ–¥ –≤ –º–µ—Å—è—Ü: ${this.formatNumber(results.monthlyNetIncome)} ‚ÇΩ</div>
            `;
        }

        // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        const key = Object.keys(results)[0];
        const value = results[key];
        return `<div class="summary-item">–û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${this.formatNumber(value)}</div>`;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     */
    generateComparisonTable() {
        const container = document.querySelector('.comparison-results');
        if (!container) return;

        const scenarios = Array.from(this.scenarios.values());
        if (scenarios.length < 2) return;

        const comparisonTable = this.buildComparisonTable(scenarios);
        const comparisonChart = this.buildComparisonChart(scenarios);

        container.innerHTML = `
            <h3>üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞</h3>
            ${comparisonTable}
            <div class="comparison-insights">
                ${this.generateInsights(scenarios)}
            </div>
            ${comparisonChart}
        `;
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     */
    buildComparisonTable(scenarios) {
        const firstScenario = scenarios[0];
        const resultKeys = Object.keys(firstScenario.results);

        let tableHTML = `
            <div class="comparison-table-container">
                <table class="comparison-table">
                    <thead>
                        <tr>
                            <th>–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å</th>
                            ${scenarios.map(s => `<th>${s.name}</th>`).join('')}
                            <th>–õ—É—á—à–∏–π</th>
                        </tr>
                    </thead>
                    <tbody>
        `;

        resultKeys.forEach(key => {
            if (key === 'error') return;

            const values = scenarios.map(s => s.results[key] || 0);
            const bestIndex = this.findBestValueIndex(values, key);

            tableHTML += `
                <tr>
                    <td class="metric-name">${this.getMetricDisplayName(key)}</td>
                    ${values.map((value, index) => `
                        <td class="${index === bestIndex ? 'best-value' : ''}">
                            ${this.formatMetricValue(value, key)}
                        </td>
                    `).join('')}
                    <td class="best-indicator">
                        ${scenarios[bestIndex].name}
                        <span class="improvement">
                            ${this.calculateImprovement(values, bestIndex, key)}
                        </span>
                    </td>
                </tr>
            `;
        });

        tableHTML += `
                    </tbody>
                </table>
            </div>
        `;

        return tableHTML;
    }

    /**
     * –ü–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–∞ –ª—É—á—à–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
     */
    findBestValueIndex(values, metricKey) {
        // –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–µ—Ç—Ä–∏–∫ –º–µ–Ω—å—à–µ = –ª—É—á—à–µ
        const lowerIsBetter = ['totalInterest', 'monthlyPayment', 'expenses', 'totalPayment'];

        if (lowerIsBetter.includes(metricKey)) {
            return values.indexOf(Math.min(...values.filter(v => v > 0)));
        } else {
            return values.indexOf(Math.max(...values));
        }
    }

    /**
     * –†–∞—Å—á–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
     */
    calculateImprovement(values, bestIndex, metricKey) {
        const bestValue = values[bestIndex];
        const worstValue = metricKey.includes('Interest') || metricKey.includes('Payment')
            ? Math.max(...values)
            : Math.min(...values.filter(v => v > 0));

        if (bestValue === worstValue || worstValue === 0) return '';

        const improvement = Math.abs((bestValue - worstValue) / worstValue * 100);
        return improvement > 0.1 ? `+${improvement.toFixed(1)}%` : '';
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     */
    generateInsights(scenarios) {
        let insights = '<h4>üí° –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã:</h4><ul class="insights-list">';

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        const firstScenario = scenarios[0];
        if (firstScenario.calculatorType === 'mortgage') {
            insights += this.getMortgageInsights(scenarios);
        } else if (firstScenario.calculatorType === 'rental') {
            insights += this.getRentalInsights(scenarios);
        } else {
            insights += this.getGenericInsights(scenarios);
        }

        insights += '</ul>';
        return insights;
    }

    /**
     * –ò–Ω—Å–∞–π—Ç—ã –¥–ª—è –∏–ø–æ—Ç–µ—á–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
     */
    getMortgageInsights(scenarios) {
        let insights = '';

        // –ù–∞–π–¥–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø–ª–∞—Ç–µ–∂–æ–º
        const minPaymentScenario = scenarios.reduce((min, current) =>
            current.results.monthlyPayment < min.results.monthlyPayment ? current : min
        );

        // –ù–∞–π–¥–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–ø–ª–∞—Ç–æ–π
        const minInterestScenario = scenarios.reduce((min, current) =>
            current.results.totalInterest < min.results.totalInterest ? current : min
        );

        insights += `<li>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: <strong>${minPaymentScenario.name}</strong> (${this.formatNumber(minPaymentScenario.results.monthlyPayment)} ‚ÇΩ)</li>`;
        insights += `<li>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø–ª–∞—Ç–∞: <strong>${minInterestScenario.name}</strong> (${this.formatNumber(minInterestScenario.results.totalInterest)} ‚ÇΩ)</li>`;

        // –†–∞–∑–Ω–∏—Ü–∞ –≤ –ø–µ—Ä–µ–ø–ª–∞—Ç–µ
        const maxInterestScenario = scenarios.reduce((max, current) =>
            current.results.totalInterest > max.results.totalInterest ? current : max
        );

        const interestDiff = maxInterestScenario.results.totalInterest - minInterestScenario.results.totalInterest;
        if (interestDiff > 0) {
            insights += `<li>–≠–∫–æ–Ω–æ–º–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª—É—á—à–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞: <strong>${this.formatNumber(interestDiff)} ‚ÇΩ</strong></li>`;
        }

        return insights;
    }

    /**
     * –ò–Ω—Å–∞–π—Ç—ã –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
     */
    getRentalInsights(scenarios) {
        let insights = '';

        const maxYieldScenario = scenarios.reduce((max, current) =>
            current.results.netYield > max.results.netYield ? current : max
        );

        const maxIncomeScenario = scenarios.reduce((max, current) =>
            current.results.monthlyNetIncome > max.results.monthlyNetIncome ? current : max
        );

        insights += `<li>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: <strong>${maxYieldScenario.name}</strong> (${maxYieldScenario.results.netYield}% –≥–æ–¥–æ–≤—ã—Ö)</li>`;
        insights += `<li>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥: <strong>${maxIncomeScenario.name}</strong> (${this.formatNumber(maxIncomeScenario.results.monthlyNetIncome)} ‚ÇΩ/–º–µ—Å—è—Ü)</li>`;

        return insights;
    }

    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
     */
    getGenericInsights(scenarios) {
        return '<li>–°—Ä–∞–≤–Ω–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –≤—ã—à–µ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è</li>';
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     */
    buildComparisonChart(scenarios) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ Chart.js –¥–ª—è –±–∞–∑–æ–≤–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        const chartContainer = `
            <div class="comparison-chart">
                <h4>üìà –í–∏–∑—É–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ</h4>
                <div class="chart-placeholder">
                    <p>–ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö</p>
                    <div class="simple-bars">
                        ${this.generateSimpleBars(scenarios)}
                    </div>
                </div>
            </div>
        `;

        return chartContainer;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç—ã—Ö –ø–æ–ª–æ—Å–æ–∫ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    generateSimpleBars(scenarios) {
        if (scenarios.length === 0) return '';

        const firstMetric = Object.keys(scenarios[0].results)[0];
        const values = scenarios.map(s => s.results[firstMetric] || 0);
        const maxValue = Math.max(...values);

        if (maxValue === 0) return '';

        return scenarios.map(scenario => {
            const value = scenario.results[firstMetric] || 0;
            const percentage = (value / maxValue * 100).toFixed(1);

            return `
                <div class="bar-item">
                    <span class="bar-label">${scenario.name}</span>
                    <div class="bar-container">
                        <div class="bar-fill" style="width: ${percentage}%"></div>
                        <span class="bar-value">${this.formatMetricValue(value, firstMetric)}</span>
                    </div>
                </div>
            `;
        }).join('');
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     */
    async exportComparison() {
        if (this.scenarios.size < 2) {
            this.showNotification('–î–æ–±–∞–≤—å—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞', 'warning');
            return;
        }

        const comparisonData = {
            title: '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ - –ú2 –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã',
            exportDate: new Date().toISOString(),
            calculatorType: this.detectCalculatorType(),
            scenarios: Array.from(this.scenarios.values()),
            summary: this.generateExportSummary()
        };

        // –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
        this.downloadJSON(comparisonData, `comparison_${Date.now()}.json`);

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.showNotification('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ JSON', 'success');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        if (window.gtag) {
            gtag('event', 'scenario_comparison_export', {
                event_category: 'Export',
                scenarios_count: this.scenarios.size,
                calculator_type: this.detectCalculatorType()
            });
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
     */
    generateExportSummary() {
        const scenarios = Array.from(this.scenarios.values());
        return {
            totalScenarios: scenarios.length,
            calculatorType: this.detectCalculatorType(),
            dateRange: {
                earliest: Math.min(...scenarios.map(s => new Date(s.createdAt).getTime())),
                latest: Math.max(...scenarios.map(s => new Date(s.createdAt).getTime()))
            }
        };
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ JSON —Ñ–∞–π–ª–∞
     */
    downloadJSON(data, filename) {
        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);

        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
     */
    removeScenario(scenarioId) {
        if (this.scenarios.has(scenarioId)) {
            const scenarioName = this.scenarios.get(scenarioId).name;
            this.scenarios.delete(scenarioId);
            this.saveScenarios();
            this.updateScenariosDisplay();

            if (this.scenarios.size < 2) {
                document.querySelector('.comparison-results').style.display = 'none';
            } else {
                this.generateComparisonTable();
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞
            const exportBtn = document.querySelector('.export-comparison-btn');
            if (exportBtn) {
                exportBtn.disabled = this.scenarios.size < 2;
            }

            this.showNotification(`–°—Ü–µ–Ω–∞—Ä–∏–π "${scenarioName}" —É–¥–∞–ª–µ–Ω`, 'info');
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
     */
    clearAllScenarios() {
        if (this.scenarios.size === 0) return;

        const confirmMessage = `–£–¥–∞–ª–∏—Ç—å –≤—Å–µ ${this.scenarios.size} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤?`;
        if (confirm(confirmMessage)) {
            this.scenarios.clear();
            this.saveScenarios();
            this.updateScenariosDisplay();

            document.querySelector('.comparison-results').style.display = 'none';
            const exportBtn = document.querySelector('.export-comparison-btn');
            if (exportBtn) {
                exportBtn.disabled = true;
            }

            this.showNotification('–í—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —É–¥–∞–ª–µ–Ω—ã', 'info');
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≤ localStorage
     */
    saveScenarios() {
        try {
            const scenariosArray = Array.from(this.scenarios.entries());
            localStorage.setItem('m2_scenario_comparison', JSON.stringify(scenariosArray));
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
     */
    loadSavedScenarios() {
        try {
            const saved = localStorage.getItem('m2_scenario_comparison');
            if (saved) {
                const scenariosArray = JSON.parse(saved);
                this.scenarios = new Map(scenariosArray);
            }
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:', error);
            this.scenarios.clear();
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    generateScenarioId() {
        return 'scenario_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }

    formatNumber(num) {
        return new Intl.NumberFormat('ru-RU').format(Math.round(num));
    }

    formatMetricValue(value, metricKey) {
        if (typeof value !== 'number') return value;

        if (metricKey.includes('Rate') || metricKey.includes('Yield')) {
            return value.toFixed(2) + '%';
        }

        if (metricKey.includes('Payment') || metricKey.includes('Amount') || metricKey.includes('Income')) {
            return this.formatNumber(value) + ' ‚ÇΩ';
        }

        return this.formatNumber(value);
    }

    getMetricDisplayName(key) {
        const names = {
            monthlyPayment: '–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂',
            totalPayment: '–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç',
            totalInterest: '–ü–µ—Ä–µ–ø–ª–∞—Ç–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É',
            loanAmount: '–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞',
            effectiveRate: '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞',
            grossYield: '–í–∞–ª–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å',
            netYield: '–ß–∏—Å—Ç–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å',
            monthlyNetIncome: '–ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥ –≤ –º–µ—Å—è—Ü',
            annualNetIncome: '–ì–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥',
            roi: '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å'
        };

        return names[key] || key;
    }

    showNotification(message, type = 'info') {
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <span class="notification-icon">${this.getNotificationIcon(type)}</span>
                <span class="notification-message">${message}</span>
                <button class="notification-close">&times;</button>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
        document.body.appendChild(notification);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            notification.remove();
        }, 3000);

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É
        notification.querySelector('.notification-close').addEventListener('click', () => {
            notification.remove();
        });
    }

    getNotificationIcon(type) {
        const icons = {
            success: '‚úÖ',
            error: '‚ùå',
            warning: '‚ö†Ô∏è',
            info: '‚ÑπÔ∏è'
        };
        return icons[type] || '‚ÑπÔ∏è';
    }

    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    updateCurrentScenario() {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if (this.scenarios.size > 0) {
            console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–º–µ–Ω–µ–Ω—ã - —Å—Ü–µ–Ω–∞—Ä–∏–∏ –º–æ–≥–ª–∏ —É—Å—Ç–∞—Ä–µ—Ç—å');
        }
    }
}

// CSS —Å—Ç–∏–ª–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
const comparisonStyles = `
<style>
.scenario-comparison-panel {
    background: #f8f9fa;
    border: 1px solid #e9ecef;
    border-radius: 12px;
    padding: 20px;
    margin-top: 20px;
}

.comparison-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 15px;
}

.comparison-header h3 {
    margin: 0;
    color: #3416b6;
    font-size: 1.2em;
}

.compare-scenarios-btn {
    background: #3416b6;
    color: white;
    border: none;
    padding: 10px 16px;
    border-radius: 8px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
    transition: all 0.2s;
}

.compare-scenarios-btn:hover {
    background: #2c0e94;
    transform: translateY(-1px);
}

.compare-scenarios-btn.active {
    background: #dc3545;
}

.comparison-controls {
    background: white;
    padding: 20px;
    border-radius: 8px;
    margin-bottom: 20px;
}

.current-scenario {
    margin-bottom: 20px;
}

.current-scenario label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
}

.current-scenario input {
    width: 100%;
    max-width: 300px;
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 6px;
    margin-right: 10px;
}

.add-scenario-btn {
    background: #28a745;
    color: white;
    border: none;
    padding: 8px 12px;
    border-radius: 6px;
    cursor: pointer;
    display: inline-flex;
    align-items: center;
    gap: 6px;
}

.add-scenario-btn:hover {
    background: #218838;
}

.scenarios-list h4 {
    margin-bottom: 15px;
    color: #495057;
}

.scenarios-container {
    min-height: 60px;
}

.no-scenarios {
    text-align: center;
    color: #6c757d;
    font-style: italic;
    padding: 20px;
}

.scenario-card {
    background: white;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 10px;
    position: relative;
}

.scenario-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.scenario-header h5 {
    margin: 0;
    color: #3416b6;
    font-size: 1.1em;
}

.remove-scenario-btn {
    background: #dc3545;
    color: white;
    border: none;
    width: 24px;
    height: 24px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 14px;
}

.remove-scenario-btn:hover {
    background: #c82333;
}

.scenario-summary {
    margin-bottom: 10px;
}

.summary-item {
    font-size: 0.9em;
    color: #495057;
    margin-bottom: 4px;
}

.scenario-meta {
    font-size: 0.8em;
    color: #6c757d;
}

.comparison-actions {
    display: flex;
    gap: 10px;
    margin-top: 20px;
}

.export-comparison-btn, .clear-scenarios-btn {
    padding: 8px 12px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 6px;
}

.export-comparison-btn {
    background: #17a2b8;
    color: white;
}

.export-comparison-btn:hover:not(:disabled) {
    background: #138496;
}

.export-comparison-btn:disabled {
    background: #6c757d;
    cursor: not-allowed;
}

.clear-scenarios-btn {
    background: #6c757d;
    color: white;
}

.clear-scenarios-btn:hover {
    background: #545b62;
}

.comparison-results {
    background: white;
    padding: 20px;
    border-radius: 8px;
    margin-top: 20px;
}

.comparison-table-container {
    overflow-x: auto;
    margin-bottom: 20px;
}

.comparison-table {
    width: 100%;
    border-collapse: collapse;
    font-size: 0.9em;
}

.comparison-table th,
.comparison-table td {
    padding: 12px 8px;
    text-align: left;
    border-bottom: 1px solid #dee2e6;
}

.comparison-table th {
    background: #f8f9fa;
    font-weight: 600;
    color: #495057;
}

.metric-name {
    font-weight: 500;
    color: #3416b6;
}

.best-value {
    background: #d4edda;
    color: #155724;
    font-weight: 600;
}

.best-indicator {
    font-weight: 500;
    color: #28a745;
}

.improvement {
    font-size: 0.8em;
    color: #6c757d;
    font-weight: normal;
}

.comparison-insights {
    background: #e3f2fd;
    padding: 15px;
    border-radius: 8px;
    margin: 20px 0;
}

.comparison-insights h4 {
    margin-top: 0;
    color: #1976d2;
}

.insights-list {
    margin: 10px 0;
    padding-left: 20px;
}

.insights-list li {
    margin-bottom: 8px;
    line-height: 1.4;
}

.comparison-chart {
    margin-top: 20px;
}

.chart-placeholder {
    background: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
    text-align: center;
}

.simple-bars {
    margin-top: 15px;
}

.bar-item {
    margin-bottom: 15px;
    text-align: left;
}

.bar-label {
    display: block;
    font-weight: 500;
    margin-bottom: 5px;
    color: #495057;
}

.bar-container {
    position: relative;
    background: #e9ecef;
    border-radius: 4px;
    height: 30px;
    display: flex;
    align-items: center;
}

.bar-fill {
    background: linear-gradient(90deg, #3416b6, #5a67d8);
    height: 100%;
    border-radius: 4px;
    transition: width 0.3s ease;
}

.bar-value {
    position: absolute;
    right: 10px;
    font-size: 0.9em;
    font-weight: 500;
    color: #495057;
}

.notification {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 10000;
    max-width: 400px;
    border-radius: 8px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
    animation: slideInRight 0.3s ease;
}

.notification-success {
    background: #d4edda;
    border: 1px solid #c3e6cb;
    color: #155724;
}

.notification-error {
    background: #f8d7da;
    border: 1px solid #f5c6cb;
    color: #721c24;
}

.notification-warning {
    background: #fff3cd;
    border: 1px solid #ffeaa7;
    color: #856404;
}

.notification-info {
    background: #cce8ff;
    border: 1px solid #b6d7ff;
    color: #004085;
}

.notification-content {
    display: flex;
    align-items: center;
    padding: 12px 16px;
    gap: 10px;
}

.notification-close {
    background: none;
    border: none;
    font-size: 18px;
    cursor: pointer;
    margin-left: auto;
    opacity: 0.7;
}

.notification-close:hover {
    opacity: 1;
}

@keyframes slideInRight {
    from {
        transform: translateX(100%);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

@media (max-width: 768px) {
    .comparison-header {
        flex-direction: column;
        align-items: stretch;
        gap: 10px;
    }

    .current-scenario input {
        max-width: none;
        margin-bottom: 10px;
    }

    .comparison-actions {
        flex-direction: column;
    }

    .comparison-table {
        font-size: 0.8em;
    }

    .notification {
        left: 20px;
        right: 20px;
        max-width: none;
    }
}
</style>
`;

// –ò–Ω—ä–µ–∫—Ü–∏—è —Å—Ç–∏–ª–µ–π
if (!document.querySelector('#scenario-comparison-styles')) {
    const styleElement = document.createElement('div');
    styleElement.id = 'scenario-comparison-styles';
    styleElement.innerHTML = comparisonStyles;
    document.head.appendChild(styleElement.firstElementChild);
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.ScenarioComparison = ScenarioComparison;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        window.scenarioComparison = new ScenarioComparison();
        window.scenarioComparison.init();
    });
} else {
    setTimeout(() => {
        window.scenarioComparison = new ScenarioComparison();
        window.scenarioComparison.init();
    }, 0);
}

export { ScenarioComparison };