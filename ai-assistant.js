/**
 * M2 Calculators AI Assistant
 * –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
 */

class AIAssistant {
    constructor() {
        this.isActive = false;
        this.conversationHistory = [];
        this.userProfile = {};
        this.knowledgeBase = this.initKnowledgeBase();
        this.recommendations = new Map();
        this.contextualHelp = new Map();

        this.init();
    }

    init() {
        this.setupUI();
        this.loadUserProfile();
        this.setupContextualHelp();
        this.initializeChatBot();
        this.setupVoiceRecognition();
        this.loadMarketData();

        console.log('ü§ñ AI Assistant –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    initKnowledgeBase() {
        return {
            mortgage: {
                rules: {
                    maxLTV: 0.8, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π LTV
                    minDownPayment: 0.15, // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å
                    maxDTI: 0.43, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–æ–ª–≥–∞ –∫ –¥–æ—Ö–æ–¥—É
                    optimalLoanTerm: 20, // –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞
                    riskThresholds: {
                        low: 0.3,
                        medium: 0.5,
                        high: 0.7
                    }
                },
                tips: [
                    '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö',
                    '–°—Ä–∞–≤–Ω–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–∏–Ω–∏–º—É–º 3-—Ö –±–∞–Ω–∫–æ–≤',
                    '–£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Å—Ç—Ä–∞—Ö–æ–≤–∫—É –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤',
                    '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ - 15-20 –ª–µ—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å–ª—É—á–∞–µ–≤'
                ]
            },
            rental: {
                rules: {
                    minCapRate: 0.06, // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è
                    optimalCapRate: 0.08, // –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è
                    maxVacancy: 0.1, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–∞–∫–∞–Ω—Ç–Ω–æ—Å—Ç—å
                    minCashFlow: 5000, // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫ –≤ –º–µ—Å—è—Ü
                    riskFactors: ['location', 'propertyAge', 'marketTrends', 'vacancy']
                },
                tips: [
                    '–õ–æ–∫–∞—Ü–∏—è –≤–∞–∂–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–ª—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏',
                    '–£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
                    '–î–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ —Ä–∞–π–æ–Ω–∞–º –∏ —Ç–∏–ø–∞–º –∂–∏–ª—å—è',
                    '–ò—Å—Å–ª–µ–¥—É–π—Ç–µ —Å–ø—Ä–æ—Å –Ω–∞ –∞—Ä–µ–Ω–¥—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–∞–π–æ–Ω–µ'
                ]
            },
            market: {
                trends: {
                    interestRates: '—É–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç',
                    propertyPrices: '—Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç',
                    rentalYield: '—Å–Ω–∏–∂–µ–Ω–∏–µ –≤ —Ü–µ–Ω—Ç—Ä–µ, —Ä–æ—Å—Ç –≤ —Å–ø–∞–ª—å–Ω—ã—Ö —Ä–∞–π–æ–Ω–∞—Ö',
                    marketSentiment: '–æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–º'
                },
                predictions: {
                    nextQuarter: '—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –∫–æ–ª–µ–±–∞–Ω–∏—è–º–∏',
                    nextYear: '—É–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç —Ü–µ–Ω –Ω–∞ 5-8%',
                    risks: ['–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏', '–≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã']
                }
            }
        };
    }

    setupUI() {
        this.createChatWidget();
        this.injectStyles();
        this.setupEventListeners();
    }

    createChatWidget() {
        const widget = document.createElement('div');
        widget.id = 'ai-assistant-widget';
        widget.className = 'ai-widget collapsed';
        widget.innerHTML = `
            <div class="ai-widget-toggle" onclick="window.M2AI.toggle()">
                <span class="ai-icon">ü§ñ</span>
                <span class="ai-text">AI –ü–æ–º–æ—â–Ω–∏–∫</span>
                <div class="ai-status-indicator"></div>
            </div>

            <div class="ai-widget-panel">
                <div class="ai-header">
                    <div class="ai-avatar">ü§ñ</div>
                    <div class="ai-info">
                        <div class="ai-name">–ú2 AI –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç</div>
                        <div class="ai-status">–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —Ä–∞—Å—á–µ—Ç–∞–º–∏</div>
                    </div>
                    <button class="ai-close" onclick="window.M2AI.toggle()">‚úï</button>
                </div>

                <div class="ai-suggestions">
                    <div class="suggestion-title">–ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</div>
                    <div class="suggestions-grid">
                        <button class="suggestion-btn" onclick="window.M2AI.askQuestion('–ö–∞–∫–æ–π –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å –æ–ø—Ç–∏–º–∞–ª–µ–Ω?')">
                            üí∞ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å
                        </button>
                        <button class="suggestion-btn" onclick="window.M2AI.askQuestion('–ö–∞–∫ –æ—Ü–µ–Ω–∏—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã?')">
                            üìä –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã
                        </button>
                        <button class="suggestion-btn" onclick="window.M2AI.askQuestion('–í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –ª—É—á—à–µ –∫—É–ø–∏—Ç—å?')">
                            üìç –í—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞
                        </button>
                        <button class="suggestion-btn" onclick="window.M2AI.askQuestion('–°—Ç–æ–∏—Ç –ª–∏ –±—Ä–∞—Ç—å –∏–ø–æ—Ç–µ–∫—É —Å–µ–π—á–∞—Å?')">
                            üè¶ –†—ã–Ω–æ—á–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
                        </button>
                    </div>
                </div>

                <div class="ai-chat-container">
                    <div class="ai-messages" id="ai-messages"></div>

                    <div class="ai-input-area">
                        <div class="ai-input-wrapper">
                            <input type="text" id="ai-input" placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏..." />
                            <button class="voice-btn" onclick="window.M2AI.startVoiceInput()" title="–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥">üé§</button>
                            <button class="send-btn" onclick="window.M2AI.sendMessage()" title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å">üì§</button>
                        </div>
                        <div class="ai-typing-indicator" id="ai-typing" style="display: none;">
                            AI –ø–µ—á–∞—Ç–∞–µ—Ç<span class="dots">...</span>
                        </div>
                    </div>
                </div>

                <div class="ai-footer">
                    <div class="ai-disclaimer">
                        ‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–æ—Å—è—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(widget);
    }

    setupEventListeners() {
        const input = document.getElementById('ai-input');
        if (input) {
            input.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    this.sendMessage();
                }
            });

            input.addEventListener('input', (e) => {
                this.handleTyping(e.target.value);
            });
        }
    }

    toggle() {
        const widget = document.getElementById('ai-assistant-widget');
        widget.classList.toggle('collapsed');
        this.isActive = !widget.classList.contains('collapsed');

        if (this.isActive && this.conversationHistory.length === 0) {
            this.showWelcomeMessage();
        }

        // –¢—Ä–µ–∫–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if (window.M2Analytics) {
            window.M2Analytics.trackFeatureUsage('ai_assistant');
        }
    }

    showWelcomeMessage() {
        const welcomeMessage = this.generateWelcomeMessage();
        this.addMessage('assistant', welcomeMessage);
    }

    generateWelcomeMessage() {
        const hour = new Date().getHours();
        let greeting = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!';

        if (hour < 12) greeting = '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!';
        else if (hour < 18) greeting = '–î–æ–±—Ä—ã–π –¥–µ–Ω—å!';
        else greeting = '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!';

        const currentPage = this.detectCurrentCalculator();
        let contextMessage = '';

        if (currentPage) {
            contextMessage = ` –í–∏–∂—É, —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ ${currentPage}. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å —Ä–∞—Å—á–µ—Ç–∞–º–∏ –∏ –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.`;
        }

        return `${greeting} –Ø –≤–∞—à AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.${contextMessage}\n\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üè†`;
    }

    detectCurrentCalculator() {
        const url = window.location.pathname;
        const calculators = {
            'mortgage_calculator.html': '–∏–ø–æ—Ç–µ—á–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä',
            'rental_profitability_calculator.html': '–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∞—Ä–µ–Ω–¥—ã',
            'affordability_calculator.html': '–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∂–∏–ª—å—è',
            'rent_vs_buy_calculator.html': '—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã –∏ –ø–æ–∫—É–ø–∫–∏',
            'airbnb_calculator.html': '–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥—ã'
        };

        for (const [path, name] of Object.entries(calculators)) {
            if (url.includes(path)) {
                return name;
            }
        }

        return null;
    }

    async sendMessage() {
        const input = document.getElementById('ai-input');
        const message = input.value.trim();

        if (!message) return;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.addMessage('user', message);
        input.value = '';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
        this.showTypingIndicator();

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        const response = await this.generateResponse(message);

        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        this.hideTypingIndicator();
        this.addMessage('assistant', response);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.conversationHistory.push(
            { role: 'user', content: message, timestamp: Date.now() },
            { role: 'assistant', content: response, timestamp: Date.now() }
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.updateUserProfile(message);
    }

    askQuestion(question) {
        const input = document.getElementById('ai-input');
        input.value = question;
        this.sendMessage();
    }

    addMessage(role, content) {
        const messagesContainer = document.getElementById('ai-messages');
        const messageElement = document.createElement('div');
        messageElement.className = `ai-message ${role}-message`;

        const time = new Date().toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
        });

        messageElement.innerHTML = `
            <div class="message-content">${this.formatMessage(content)}</div>
            <div class="message-time">${time}</div>
        `;

        messagesContainer.appendChild(messageElement);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    formatMessage(content) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ markdown-–ø–æ–¥–æ–±–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        return content
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
            .replace(/`(.*?)`/g, '<code>$1</code>')
            .replace(/\n/g, '<br>')
            .replace(/üí∞|üìä|üìç|üè¶|üè†|üìà|üìâ|‚ö†Ô∏è|‚úÖ|‚ùå/g, '<span class="emoji">$&</span>');
    }

    showTypingIndicator() {
        document.getElementById('ai-typing').style.display = 'block';
    }

    hideTypingIndicator() {
        document.getElementById('ai-typing').style.display = 'none';
    }

    async generateResponse(message) {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const intent = this.analyzeIntent(message);
        const context = this.getContextualData();

        let response = '';

        switch (intent.type) {
            case 'mortgage_advice':
                response = this.generateMortgageAdvice(intent, context);
                break;
            case 'rental_advice':
                response = this.generateRentalAdvice(intent, context);
                break;
            case 'market_question':
                response = this.generateMarketInsight(intent, context);
                break;
            case 'calculation_help':
                response = this.generateCalculationHelp(intent, context);
                break;
            case 'general_question':
                response = this.generateGeneralAdvice(intent, context);
                break;
            default:
                response = this.generateFallbackResponse(message);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        response += this.addPersonalizedRecommendations(intent, context);

        return response;
    }

    analyzeIntent(message) {
        const lowercaseMessage = message.toLowerCase();

        const intents = {
            mortgage_advice: [
                '–∏–ø–æ—Ç–µ–∫–∞', '–∫—Ä–µ–¥–∏—Ç', '–ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å', '–ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞',
                '—Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞', '–¥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ', '–±–∞–Ω–∫', '–ª—å–≥–æ—Ç–Ω–∞—è –∏–ø–æ—Ç–µ–∫–∞'
            ],
            rental_advice: [
                '–∞—Ä–µ–Ω–¥–∞', '–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å', '–∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏',
                '—Å–¥–∞–≤–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É', '–∞—Ä–µ–Ω–¥–Ω–∞—è –ø–ª–∞—Ç–∞', '–æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å'
            ],
            market_question: [
                '—Ä—ã–Ω–æ–∫', '—Ü–µ–Ω—ã', '–ø—Ä–æ–≥–Ω–æ–∑', '—Ç—Ä–µ–Ω–¥', '–∫–æ–≥–¥–∞ –ø–æ–∫—É–ø–∞—Ç—å',
                '—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–∫—É–ø–∞—Ç—å', '—Å–∏—Ç—É–∞—Ü–∏—è –Ω–∞ —Ä—ã–Ω–∫–µ', '–∫—É—Ä—Å'
            ],
            calculation_help: [
                '–∫–∞–∫ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å', '—Ñ–æ—Ä–º—É–ª–∞', '—Å—á–∏—Ç–∞—Ç—å', '–ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
                '—á—Ç–æ –≤–≤–æ–¥–∏—Ç—å', '–ø–æ–º–æ—á—å —Å —Ä–∞—Å—á–µ—Ç–æ–º'
            ]
        };

        for (const [intentType, keywords] of Object.entries(intents)) {
            if (keywords.some(keyword => lowercaseMessage.includes(keyword))) {
                return {
                    type: intentType,
                    confidence: this.calculateConfidence(lowercaseMessage, keywords),
                    keywords: keywords.filter(k => lowercaseMessage.includes(k))
                };
            }
        }

        return { type: 'general_question', confidence: 0.5, keywords: [] };
    }

    calculateConfidence(message, keywords) {
        const matchedKeywords = keywords.filter(k => message.includes(k)).length;
        return Math.min(matchedKeywords / keywords.length * 2, 1);
    }

    getContextualData() {
        const currentCalculator = this.detectCurrentCalculator();
        const formData = this.extractFormData();
        const userMetrics = this.getUserMetrics();

        return {
            calculator: currentCalculator,
            formData: formData,
            metrics: userMetrics,
            timestamp: Date.now()
        };
    }

    extractFormData() {
        const data = {};
        const inputs = document.querySelectorAll('input[type="number"], select');

        inputs.forEach(input => {
            if (input.value && input.name) {
                data[input.name] = parseFloat(input.value) || input.value;
            }
        });

        return data;
    }

    generateMortgageAdvice(intent, context) {
        const { formData } = context;
        const kb = this.knowledgeBase.mortgage;
        let advice = 'üè¶ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–ø–æ—Ç–µ–∫–µ:**\n\n';

        if (formData.propertyPrice && formData.downPayment) {
            const ltv = (formData.propertyPrice - formData.downPayment) / formData.propertyPrice;
            const downPaymentPercent = (formData.downPayment / formData.propertyPrice) * 100;

            if (ltv > kb.rules.maxLTV) {
                advice += `‚ö†Ô∏è LTV —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${(ltv * 100).toFixed(1)}%, —á—Ç–æ –≤—ã—à–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞ (${kb.rules.maxLTV * 100}%). –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤–∑–Ω–æ—Å–∞.\n\n`;
            } else {
                advice += `‚úÖ LTV –≤ –Ω–æ—Ä–º–µ: ${(ltv * 100).toFixed(1)}%\n\n`;
            }

            if (downPaymentPercent < kb.rules.minDownPayment * 100) {
                advice += `üí∞ –†–µ–∫–æ–º–µ–Ω–¥—É—é —É–≤–µ–ª–∏—á–∏—Ç—å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å –¥–æ ${kb.rules.minDownPayment * 100}% –¥–ª—è –ª—É—á—à–∏—Ö —É—Å–ª–æ–≤–∏–π.\n\n`;
            }
        }

        if (formData.loanTerm) {
            if (formData.loanTerm > kb.rules.optimalLoanTerm) {
                advice += `üìÖ –°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ ${formData.loanTerm} –ª–µ—Ç. –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –¥–æ ${kb.rules.optimalLoanTerm} –ª–µ—Ç —Å—ç–∫–æ–Ω–æ–º–∏—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.\n\n`;
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Å–æ–≤–µ—Ç—ã
        advice += '**–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:**\n';
        kb.tips.forEach(tip => {
            advice += `‚Ä¢ ${tip}\n`;
        });

        return advice;
    }

    generateRentalAdvice(intent, context) {
        const { formData } = context;
        const kb = this.knowledgeBase.rental;
        let advice = 'üìä **–ê–Ω–∞–ª–∏–∑ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ –∞—Ä–µ–Ω–¥—É:**\n\n';

        if (formData.propertyPrice && formData.monthlyRent) {
            const annualRent = formData.monthlyRent * 12;
            const capRate = annualRent / formData.propertyPrice;

            advice += `**–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è:** ${(capRate * 100).toFixed(2)}%\n\n`;

            if (capRate < kb.rules.minCapRate) {
                advice += `‚ö†Ô∏è –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π (${kb.rules.minCapRate * 100}%). –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—É –∏–ª–∏ –∞—Ä–µ–Ω–¥–Ω—É—é –ø–ª–∞—Ç—É.\n\n`;
            } else if (capRate >= kb.rules.optimalCapRate) {
                advice += `‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è! –û–±—ä–µ–∫—Ç –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.\n\n`;
            } else {
                advice += `üìà –ü—Ä–∏–µ–º–ª–µ–º–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è, –Ω–æ –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.\n\n`;
            }

            const monthlyNetIncome = formData.monthlyRent * 0.85; // —Å —É—á–µ—Ç–æ–º —Ä–∞—Å—Ö–æ–¥–æ–≤
            if (monthlyNetIncome < kb.rules.minCashFlow) {
                advice += `üí∏ –ß–∏—Å—Ç—ã–π –¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∑–∫–∏–º. –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ.\n\n`;
            }
        }

        advice += '**–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:**\n';
        kb.tips.forEach(tip => {
            advice += `‚Ä¢ ${tip}\n`;
        });

        return advice;
    }

    generateMarketInsight(intent, context) {
        const kb = this.knowledgeBase.market;
        let insight = 'üìà **–û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:**\n\n';

        insight += `**–¢–µ–∫—É—â–∏–µ —Ç—Ä–µ–Ω–¥—ã:**\n`;
        insight += `‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏: ${kb.trends.interestRates}\n`;
        insight += `‚Ä¢ –¶–µ–Ω—ã –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å: ${kb.trends.propertyPrices}\n`;
        insight += `‚Ä¢ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã: ${kb.trends.rentalYield}\n`;
        insight += `‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä—ã–Ω–∫–∞: ${kb.trends.marketSentiment}\n\n`;

        insight += `**–ü—Ä–æ–≥–Ω–æ–∑—ã:**\n`;
        insight += `‚Ä¢ –°–ª–µ–¥—É—é—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª: ${kb.predictions.nextQuarter}\n`;
        insight += `‚Ä¢ –°–ª–µ–¥—É—é—â–∏–π –≥–æ–¥: ${kb.predictions.nextYear}\n\n`;

        insight += `**–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∏—Å–∫–∏:**\n`;
        kb.predictions.risks.forEach(risk => {
            insight += `‚ö†Ô∏è ${risk}\n`;
        });

        insight += '\n**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏ –¶–ë –∏ –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π.';

        return insight;
    }

    generateCalculationHelp(intent, context) {
        const calculator = context.calculator;
        let help = 'üßÆ **–ü–æ–º–æ—â—å —Å —Ä–∞—Å—á–µ—Ç–∞–º–∏:**\n\n';

        if (calculator?.includes('–∏–ø–æ—Ç–µ—á–Ω—ã–π')) {
            help += `**–ö–∞–∫ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–ø–æ—Ç–µ—á–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:**\n`;
            help += `‚Ä¢ **–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏** - –ø–æ–ª–Ω–∞—è —Ü–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–∞\n`;
            help += `‚Ä¢ **–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å** - —Å—É–º–º–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤\n`;
            help += `‚Ä¢ **–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞** - –≥–æ–¥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É\n`;
            help += `‚Ä¢ **–°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞** - –ø–µ—Ä–∏–æ–¥ –ø–æ–≥–∞—à–µ–Ω–∏—è –≤ –≥–æ–¥–∞—Ö\n\n`;
            help += `üí° **–°–æ–≤–µ—Ç:** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏, –∏–∑–º–µ–Ω—è—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å –∏ —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞.`;
        } else if (calculator?.includes('–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏')) {
            help += `**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏:**\n`;
            help += `‚Ä¢ **–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏** - —Ü–µ–Ω–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤\n`;
            help += `‚Ä¢ **–ê—Ä–µ–Ω–¥–Ω–∞—è –ø–ª–∞—Ç–∞** - –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç –∞—Ä–µ–Ω–¥—ã\n`;
            help += `‚Ä¢ **–†–∞—Å—Ö–æ–¥—ã –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ** - –∫–æ–º–∏—Å—Å–∏—è —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏\n`;
            help += `‚Ä¢ **–í–∞–∫–∞–Ω—Ç–Ω–æ—Å—Ç—å** - –ø—Ä–æ—Ü–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ –±–µ–∑ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤\n\n`;
            help += `üí° **–°–æ–≤–µ—Ç:** –ë—É–¥—å—Ç–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã –≤ –æ—Ü–µ–Ω–∫–∞—Ö –∏ —É—á–∏—Ç—ã–≤–∞–π—Ç–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã.`;
        } else {
            help += `**–û–±—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞—Å—á–µ—Ç–æ–≤:**\n`;
            help += `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n`;
            help += `‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –≤—Å–µ —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã\n`;
            help += `‚Ä¢ –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤\n`;
            help += `‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n`;
            help += `‚ùì –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º, –ø—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ!`;
        }

        return help;
    }

    generateGeneralAdvice(intent, context) {
        const generalTips = [
            'üéØ **–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–≤–æ–∏ —Ü–µ–ª–∏:** –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∂–∏–ª—å–µ',
            'üí∞ **–ò–∑—É—á–∏—Ç–µ —Ä—ã–Ω–æ–∫:** —Å—Ä–∞–≤–Ω–∏—Ç–µ —Ü–µ–Ω—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–π–æ–Ω–∞—Ö',
            'üè¶ **–°—Ä–∞–≤–Ω–∏—Ç–µ –±–∞–Ω–∫–∏:** —É—Å–ª–æ–≤–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è –º–æ–≥—É—Ç —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è',
            'üìä **–†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Ä–∏—Å–∫–∏:** —É—á–∏—Ç—ã–≤–∞–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤',
            'üîç **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:** —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è —á–∏—Å—Ç–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ'
        ];

        let advice = 'üí° **–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:**\n\n';
        advice += generalTips.join('\n\n');
        advice += '\n\nü§ñ –ó–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏!';

        return advice;
    }

    generateFallbackResponse(message) {
        const responses = [
            '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ú–æ–≥—É –ø–æ–º–æ—á—å —Å —Ä–∞—Å—á–µ—Ç–∞–º–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –∏–ø–æ—Ç–µ–∫–∏ –∏–ª–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å?',
            '–ü–æ–∫–∞ —è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è—Ö –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ?',
            '–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ –∏–ø–æ—Ç–µ–∫–µ, –∞—Ä–µ–Ω–¥–µ –∏–ª–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö –≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å.',
            '–ú–æ—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ - –≤ —Å—Ñ–µ—Ä–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤. –û —á–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å?'
        ];

        return responses[Math.floor(Math.random() * responses.length)];
    }

    addPersonalizedRecommendations(intent, context) {
        const profile = this.userProfile;
        let recommendations = '';

        // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if (profile.calculationsCount > 10) {
            recommendations += '\n\nüéñÔ∏è **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –í—ã –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.';
        }

        if (profile.preferredCalculator === 'rental') {
            recommendations += '\n\nüíº **–î–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞:** –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –Ω–∞–ª–æ–≥–æ–≤–æ–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ –∏ –Ω–æ–≤—ã–º–∏ –ª—å–≥–æ—Ç–∞–º–∏ –¥–ª—è –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª–µ–π.';
        }

        if (context.formData.propertyPrice > 10000000) {
            recommendations += '\n\nüèõÔ∏è **–ü—Ä–µ–º–∏—É–º —Å–µ–≥–º–µ–Ω—Ç:** –í –≤–∞—à–µ–º —Ü–µ–Ω–æ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–∞ —ç–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.';
        }

        return recommendations;
    }

    setupVoiceRecognition() {
        if ('webkitSpeechRecognition' in window) {
            this.recognition = new webkitSpeechRecognition();
            this.recognition.lang = 'ru-RU';
            this.recognition.continuous = false;
            this.recognition.interimResults = false;

            this.recognition.onresult = (event) => {
                const transcript = event.results[0][0].transcript;
                document.getElementById('ai-input').value = transcript;
                this.sendMessage();
            };

            this.recognition.onerror = (event) => {
                console.warn('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏:', event.error);
            };
        }
    }

    startVoiceInput() {
        if (this.recognition) {
            try {
                this.recognition.start();
                const voiceBtn = document.querySelector('.voice-btn');
                voiceBtn.innerHTML = 'üî¥';
                voiceBtn.title = '–ì–æ–≤–æ—Ä–∏—Ç–µ...';

                setTimeout(() => {
                    voiceBtn.innerHTML = 'üé§';
                    voiceBtn.title = '–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥';
                }, 5000);
            } catch (error) {
                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏:', error);
            }
        }
    }

    handleTyping(text) {
        // –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞
        if (text.length > 3) {
            this.showAutocompleteSuggestions(text);
        }
    }

    showAutocompleteSuggestions(text) {
        const suggestions = this.generateAutocompleteSuggestions(text);

        if (suggestions.length > 0) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ (–º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å UI)
            console.log('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', suggestions);
        }
    }

    generateAutocompleteSuggestions(text) {
        const commonQuestions = [
            '–ö–∞–∫–æ–π –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å?',
            '–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã?',
            '–°—Ç–æ–∏—Ç –ª–∏ –±—Ä–∞—Ç—å –∏–ø–æ—Ç–µ–∫—É —Å–µ–π—á–∞—Å?',
            '–í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –ª—É—á—à–µ –ø–æ–∫—É–ø–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å?',
            '–ö–∞–∫ —Å—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤?',
            '–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏?',
            '–ö–∞–∫ —É—á–µ—Å—Ç—å —Ä–∏—Å–∫–∏ –ø—Ä–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö?'
        ];

        return commonQuestions.filter(q =>
            q.toLowerCase().includes(text.toLowerCase())
        ).slice(0, 3);
    }

    loadUserProfile() {
        const stored = localStorage.getItem('m2_ai_user_profile');
        if (stored) {
            this.userProfile = JSON.parse(stored);
        } else {
            this.userProfile = {
                calculationsCount: 0,
                preferredCalculator: null,
                interactions: 0,
                lastSeen: Date.now()
            };
        }
    }

    updateUserProfile(message) {
        this.userProfile.interactions++;
        this.userProfile.lastSeen = Date.now();

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const calculator = this.detectCurrentCalculator();
        if (calculator) {
            this.userProfile.preferredCalculator = calculator;
        }

        this.saveUserProfile();
    }

    saveUserProfile() {
        localStorage.setItem('m2_ai_user_profile', JSON.stringify(this.userProfile));
    }

    getUserMetrics() {
        if (window.M2Analytics) {
            return window.M2Analytics.getMetrics();
        }
        return {};
    }

    setupContextualHelp() {
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –ø–æ–º–æ—â—å –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        document.addEventListener('focus', (e) => {
            if (e.target.matches('input[type="number"], select')) {
                this.showContextualHelp(e.target);
            }
        }, true);
    }

    showContextualHelp(element) {
        const helpText = this.getHelpForElement(element);
        if (helpText && this.isActive) {
            this.addMessage('assistant', `üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∞:** ${helpText}`);
        }
    }

    getHelpForElement(element) {
        const helpMap = {
            'propertyPrice': '–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –≤–∫–ª—é—á–∞—è –≤—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
            'downPayment': '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–∏–Ω–∏–º—É–º - 20% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –ª—É—á—à–∏—Ö —É—Å–ª–æ–≤–∏–π –∫—Ä–µ–¥–∏—Ç–∞',
            'interestRate': '–¢–µ–∫—É—â–∏–µ —Å—Ç–∞–≤–∫–∏ –ø–æ –∏–ø–æ—Ç–µ–∫–µ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç 7-12% –≥–æ–¥–æ–≤—ã—Ö',
            'loanTerm': '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ - 15-20 –ª–µ—Ç –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –∏ –ø–µ—Ä–µ–ø–ª–∞—Ç—ã',
            'monthlyRent': '–£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ä–µ–∞–ª—å–Ω—É—é —Ä—ã–Ω–æ—á–Ω—É—é –∞—Ä–µ–Ω–¥–Ω—É—é –ø–ª–∞—Ç—É –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞'
        };

        return helpMap[element.name] || helpMap[element.id];
    }

    loadMarketData() {
        // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        this.marketData = {
            averageRates: {
                mortgage: 9.5,
                commercial: 12.0
            },
            priceIndex: 105.2,
            rentalYield: {
                residential: 6.8,
                commercial: 8.2
            },
            lastUpdated: Date.now()
        };
    }

    injectStyles() {
        if (document.querySelector('#ai-assistant-styles')) return;

        const styles = document.createElement('style');
        styles.id = 'ai-assistant-styles';
        styles.textContent = `
            .ai-widget {
                position: fixed;
                bottom: 20px;
                right: 20px;
                z-index: 10003;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            }

            .ai-widget-toggle {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 12px 20px;
                border-radius: 25px;
                cursor: pointer;
                box-shadow: 0 4px 20px rgba(102, 126, 234, 0.3);
                display: flex;
                align-items: center;
                gap: 8px;
                transition: all 0.3s ease;
                position: relative;
            }

            .ai-widget-toggle:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 25px rgba(102, 126, 234, 0.4);
            }

            .ai-icon {
                font-size: 18px;
            }

            .ai-text {
                font-weight: 600;
                font-size: 14px;
            }

            .ai-status-indicator {
                width: 8px;
                height: 8px;
                background: #4ade80;
                border-radius: 50%;
                animation: pulse 2s infinite;
            }

            .ai-widget-panel {
                position: absolute;
                bottom: 60px;
                right: 0;
                width: 380px;
                height: 500px;
                background: white;
                border-radius: 15px;
                box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
                display: flex;
                flex-direction: column;
                overflow: hidden;
                transform: scale(0.8) translateY(20px);
                opacity: 0;
                pointer-events: none;
                transition: all 0.3s ease;
            }

            .ai-widget:not(.collapsed) .ai-widget-panel {
                transform: scale(1) translateY(0);
                opacity: 1;
                pointer-events: all;
            }

            .ai-widget.collapsed .ai-widget-toggle .ai-text::after {
                content: ' (1)';
                background: #ff4757;
                color: white;
                font-size: 10px;
                padding: 2px 6px;
                border-radius: 10px;
                margin-left: 5px;
            }

            .ai-header {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 15px 20px;
                display: flex;
                align-items: center;
                gap: 12px;
            }

            .ai-avatar {
                font-size: 24px;
                width: 40px;
                height: 40px;
                background: rgba(255, 255, 255, 0.2);
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .ai-info {
                flex: 1;
            }

            .ai-name {
                font-weight: 600;
                font-size: 16px;
            }

            .ai-status {
                font-size: 12px;
                opacity: 0.9;
            }

            .ai-close {
                background: rgba(255, 255, 255, 0.2);
                border: none;
                color: white;
                width: 30px;
                height: 30px;
                border-radius: 50%;
                cursor: pointer;
                font-size: 14px;
            }

            .ai-suggestions {
                padding: 15px 20px;
                border-bottom: 1px solid #eee;
            }

            .suggestion-title {
                font-size: 12px;
                font-weight: 600;
                color: #666;
                margin-bottom: 10px;
            }

            .suggestions-grid {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 8px;
            }

            .suggestion-btn {
                background: #f8f9fa;
                border: 1px solid #dee2e6;
                padding: 8px 12px;
                border-radius: 8px;
                font-size: 11px;
                cursor: pointer;
                text-align: left;
                transition: all 0.2s ease;
            }

            .suggestion-btn:hover {
                background: #e9ecef;
                border-color: #adb5bd;
            }

            .ai-chat-container {
                flex: 1;
                display: flex;
                flex-direction: column;
                min-height: 0;
            }

            .ai-messages {
                flex: 1;
                padding: 15px 20px;
                overflow-y: auto;
                display: flex;
                flex-direction: column;
                gap: 15px;
            }

            .ai-message {
                max-width: 85%;
                animation: messageSlideIn 0.3s ease-out;
            }

            .user-message {
                align-self: flex-end;
            }

            .user-message .message-content {
                background: #007bff;
                color: white;
                padding: 10px 15px;
                border-radius: 18px 18px 5px 18px;
                font-size: 14px;
            }

            .assistant-message .message-content {
                background: #f8f9fa;
                color: #333;
                padding: 12px 15px;
                border-radius: 18px 18px 18px 5px;
                font-size: 14px;
                line-height: 1.4;
            }

            .message-time {
                font-size: 10px;
                color: #999;
                margin-top: 4px;
                text-align: right;
            }

            .user-message .message-time {
                text-align: right;
            }

            .assistant-message .message-time {
                text-align: left;
            }

            .ai-input-area {
                padding: 15px 20px;
                border-top: 1px solid #eee;
            }

            .ai-input-wrapper {
                display: flex;
                gap: 8px;
                align-items: center;
            }

            #ai-input {
                flex: 1;
                border: 1px solid #ddd;
                border-radius: 20px;
                padding: 10px 15px;
                font-size: 14px;
                outline: none;
            }

            #ai-input:focus {
                border-color: #007bff;
                box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
            }

            .voice-btn, .send-btn {
                background: #f8f9fa;
                border: 1px solid #dee2e6;
                width: 40px;
                height: 40px;
                border-radius: 50%;
                cursor: pointer;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 16px;
                transition: all 0.2s ease;
            }

            .voice-btn:hover, .send-btn:hover {
                background: #e9ecef;
            }

            .send-btn {
                background: #007bff;
                border-color: #007bff;
                color: white;
            }

            .send-btn:hover {
                background: #0056b3;
            }

            .ai-typing-indicator {
                font-size: 12px;
                color: #999;
                margin-top: 5px;
                font-style: italic;
            }

            .dots {
                animation: typingDots 1.5s infinite;
            }

            .ai-footer {
                padding: 10px 20px;
                border-top: 1px solid #eee;
                background: #f8f9fa;
            }

            .ai-disclaimer {
                font-size: 10px;
                color: #666;
                text-align: center;
            }

            .emoji {
                font-size: 16px;
            }

            /* –ê–Ω–∏–º–∞—Ü–∏–∏ */
            @keyframes pulse {
                0%, 100% { opacity: 1; }
                50% { opacity: 0.5; }
            }

            @keyframes messageSlideIn {
                from {
                    opacity: 0;
                    transform: translateY(10px);
                }
                to {
                    opacity: 1;
                    transform: translateY(0);
                }
            }

            @keyframes typingDots {
                0%, 60%, 100% { opacity: 0; }
                30% { opacity: 1; }
            }

            /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
            @media (max-width: 768px) {
                .ai-widget {
                    bottom: 90px;
                    right: 10px;
                }

                .ai-widget-panel {
                    width: calc(100vw - 20px);
                    max-width: 350px;
                    height: 450px;
                }

                .suggestions-grid {
                    grid-template-columns: 1fr;
                }
            }

            /* –°–∫—Ä—ã—Ç–∏–µ –Ω–∞ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö */
            @media (max-width: 480px) {
                .ai-widget-toggle .ai-text {
                    display: none;
                }
            }
        `;

        document.head.appendChild(styles);
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    getConversationHistory() {
        return this.conversationHistory;
    }

    clearConversation() {
        this.conversationHistory = [];
        document.getElementById('ai-messages').innerHTML = '';
        this.showWelcomeMessage();
    }

    exportConversation() {
        const exportData = {
            timestamp: new Date().toISOString(),
            conversation: this.conversationHistory,
            userProfile: this.userProfile,
            context: this.getContextualData()
        };

        return JSON.stringify(exportData, null, 2);
    }

    getAIStatus() {
        return {
            isActive: this.isActive,
            conversationLength: this.conversationHistory.length,
            userProfile: this.userProfile,
            hasVoiceSupport: !!this.recognition,
            lastInteraction: this.userProfile.lastSeen
        };
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä AI Assistant
const aiAssistant = new AIAssistant();

// –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.M2AI = aiAssistant;

// –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –æ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
if (window.M2EnhancementsLoader) {
    window.M2EnhancementsLoader.registerModule('ai-assistant', aiAssistant);
}

console.log('ü§ñ AI Assistant –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');