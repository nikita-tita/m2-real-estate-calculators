/**
 * Excel Export - —Å–∏—Å—Ç–µ–º–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Excel –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤ –ú2
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å—á–µ—Ç–æ–≤, —Ç–∞–±–ª–∏—Ü –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ XLSX
 */

class ExcelExporter {
    constructor() {
        this.workbook = null;
        this.worksheets = new Map();
        this.styles = this.createStyles();
        this.charts = [];
        this.images = [];
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞ Excel
     */
    async init() {
        await this.loadLibrary();
        this.setupEventListeners();
        this.injectExportButtons();

        console.log('üìä Excel Export –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ SheetJS
     */
    async loadLibrary() {
        if (typeof XLSX !== 'undefined') return;

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º SheetJS —Å CDN
            await this.loadScript('https://unpkg.com/xlsx@0.18.5/dist/xlsx.full.min.js');
            console.log('üìö SheetJS –∑–∞–≥—Ä—É–∂–µ–Ω');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SheetJS:', error);
            // Fallback - —Å–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –±–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            this.createFallbackExporter();
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
     */
    loadScript(src) {
        return new Promise((resolve, reject) => {
            if (document.querySelector(`script[src="${src}"]`)) {
                resolve();
                return;
            }

            const script = document.createElement('script');
            script.src = src;
            script.onload = resolve;
            script.onerror = reject;
            document.head.appendChild(script);
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ fallback —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
     */
    createFallbackExporter() {
        window.XLSX = {
            utils: {
                book_new: () => ({ Sheets: {}, SheetNames: [] }),
                json_to_sheet: (data) => this.jsonToSheetFallback(data),
                book_append_sheet: (wb, ws, name) => {
                    wb.Sheets[name] = ws;
                    wb.SheetNames.push(name);
                }
            },
            writeFile: (wb, filename) => this.writeFileFallback(wb, filename)
        };
    }

    /**
     * Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è JSON –≤ –ª–∏—Å—Ç
     */
    jsonToSheetFallback(data) {
        if (!Array.isArray(data) || data.length === 0) return {};

        const headers = Object.keys(data[0]);
        const csvContent = [
            headers.join(','),
            ...data.map(row => headers.map(header => {
                const value = row[header];
                // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–∞–ø—è—Ç—ã–µ –∏ –∫–∞–≤—ã—á–∫–∏
                if (typeof value === 'string' && (value.includes(',') || value.includes('"'))) {
                    return `"${value.replace(/"/g, '""')}"`;
                }
                return value;
            }).join(','))
        ].join('\n');

        return { csvContent, headers, data };
    }

    /**
     * Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞
     */
    writeFileFallback(workbook, filename) {
        const sheets = Object.keys(workbook.Sheets);
        if (sheets.length === 0) return;

        const mainSheet = workbook.Sheets[sheets[0]];
        const csvContent = mainSheet.csvContent || '';

        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        this.downloadBlob(blob, filename.replace('.xlsx', '.csv'));
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        document.addEventListener('click', (e) => {
            if (e.target.matches('.export-excel-btn')) {
                this.exportCurrentCalculator();
            }

            if (e.target.matches('.export-comparison-excel-btn')) {
                this.exportScenarioComparison();
            }

            if (e.target.matches('.export-detailed-excel-btn')) {
                this.exportDetailedAnalysis();
            }
        });
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    injectExportButtons() {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –±–ª–æ–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        const resultsSections = document.querySelectorAll('.results-section, .calculation-results, .results-container');

        resultsSections.forEach(section => {
            if (!section.querySelector('.excel-export-controls')) {
                this.addExportControls(section);
            }
        });
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–æ–º
     */
    addExportControls(container) {
        const exportControls = document.createElement('div');
        exportControls.className = 'excel-export-controls';
        exportControls.innerHTML = `
            <div class="export-buttons-group">
                <button class="export-excel-btn" title="–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel">
                    <i class="feather-icon" data-feather="file-text"></i>
                    –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
                </button>
                <button class="export-detailed-excel-btn" title="–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ Excel">
                    <i class="feather-icon" data-feather="bar-chart"></i>
                    –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
                </button>
            </div>
            <div class="export-options">
                <label class="export-option">
                    <input type="checkbox" id="include-charts" checked>
                    –í–∫–ª—é—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏
                </label>
                <label class="export-option">
                    <input type="checkbox" id="include-formulas" checked>
                    –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É–ª—ã
                </label>
                <label class="export-option">
                    <input type="checkbox" id="include-summary" checked>
                    –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                </label>
            </div>
        `;

        container.appendChild(exportControls);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏ Feather
        if (typeof feather !== 'undefined') {
            feather.replace();
        }
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
     */
    async exportCurrentCalculator() {
        try {
            const calculatorData = this.extractCalculatorData();
            const workbook = XLSX.utils.book_new();

            // –û—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            this.addResultsSheet(workbook, calculatorData);

            // –õ–∏—Å—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            this.addParametersSheet(workbook, calculatorData);

            // –õ–∏—Å—Ç —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if (calculatorData.breakdown) {
                this.addBreakdownSheet(workbook, calculatorData);
            }

            // –õ–∏—Å—Ç —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ (—Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ)
            if (document.getElementById('include-charts')?.checked) {
                this.addChartsSheet(workbook, calculatorData);
            }

            // –õ–∏—Å—Ç —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏
            if (document.getElementById('include-formulas')?.checked) {
                this.addFormulasSheet(workbook, calculatorData);
            }

            const filename = `${calculatorData.type}_${new Date().toISOString().split('T')[0]}.xlsx`;
            XLSX.writeFile(workbook, filename);

            this.showNotification('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel', 'success');

            // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            if (window.gtag) {
                gtag('event', 'excel_export', {
                    calculator_type: calculatorData.type,
                    export_type: 'standard'
                });
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Excel', 'error');
        }
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
     */
    extractCalculatorData() {
        const calculatorType = this.detectCalculatorType();
        const params = this.extractParameters();
        const results = this.extractResults();

        return {
            type: calculatorType,
            title: this.getCalculatorTitle(),
            timestamp: new Date().toISOString(),
            parameters: params,
            results: results,
            breakdown: this.extractBreakdown(),
            charts: this.extractChartsData(),
            metadata: {
                userAgent: navigator.userAgent,
                url: window.location.href,
                version: '1.0'
            }
        };
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
     */
    detectCalculatorType() {
        const url = window.location.pathname;
        const title = document.title.toLowerCase();

        if (url.includes('mortgage') || title.includes('–∏–ø–æ—Ç–µ–∫')) return 'mortgage';
        if (url.includes('rental') || title.includes('–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç')) return 'rental';
        if (url.includes('rent') && url.includes('buy')) return 'rent_vs_buy';
        if (url.includes('prepayment') || title.includes('–¥–æ—Å—Ä–æ—á–Ω')) return 'prepayment';
        if (url.includes('affordability') || title.includes('–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç')) return 'affordability';
        if (url.includes('airbnb') || title.includes('–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω')) return 'airbnb';

        return 'calculator';
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
     */
    getCalculatorTitle() {
        const h1 = document.querySelector('h1');
        if (h1) return h1.textContent.trim();

        const title = document.title;
        return title.replace(' - –ú2 –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã', '');
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     */
    extractParameters() {
        const params = {};
        const inputs = document.querySelectorAll('input[type="number"], input[type="range"], select');

        inputs.forEach(input => {
            if (input.id || input.name) {
                const key = input.id || input.name;
                const label = this.getInputLabel(input);

                let value = input.value;
                if (input.type === 'number' || input.type === 'range') {
                    value = parseFloat(value) || 0;
                }

                params[key] = {
                    label: label,
                    value: value,
                    unit: this.getInputUnit(input)
                };
            }
        });

        return params;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –ø–æ–ª—è –≤–≤–æ–¥–∞
     */
    getInputLabel(input) {
        // –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π label
        let label = document.querySelector(`label[for="${input.id}"]`);
        if (label) return label.textContent.trim();

        // –ò—â–µ–º label-—Ä–æ–¥–∏—Ç–µ–ª—å
        label = input.closest('label');
        if (label) return label.textContent.replace(input.value, '').trim();

        // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Ç–µ–∫—Å—Ç
        const container = input.closest('.input-group, .form-group, .calculator-field');
        if (container) {
            const labelText = container.querySelector('.label, .field-label, span, p');
            if (labelText) return labelText.textContent.trim();
        }

        // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º placeholder –∏–ª–∏ id
        return input.placeholder || input.id || '–ü–∞—Ä–∞–º–µ—Ç—Ä';
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
     */
    getInputUnit(input) {
        const fieldName = input.id || input.name;

        const units = {
            'Amount': '‚ÇΩ',
            'Price': '‚ÇΩ',
            'Payment': '‚ÇΩ',
            'Income': '‚ÇΩ',
            'Rent': '‚ÇΩ',
            'Rate': '%',
            'Percentage': '%',
            'Term': '–ª–µ—Ç',
            'Years': '–ª–µ—Ç',
            'Months': '–º–µ—Å'
        };

        for (const [key, unit] of Object.entries(units)) {
            if (fieldName.toLowerCase().includes(key.toLowerCase())) {
                return unit;
            }
        }

        return '';
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    extractResults() {
        const results = {};
        const resultElements = document.querySelectorAll('.result-item, .calculation-result, .metric-value');

        resultElements.forEach(element => {
            const label = this.getResultLabel(element);
            const value = this.getResultValue(element);

            if (label && value !== null) {
                results[label] = {
                    value: value,
                    formatted: element.textContent.trim(),
                    type: this.detectResultType(element)
                };
            }
        });

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü
        const tables = document.querySelectorAll('table');
        tables.forEach((table, index) => {
            const tableData = this.extractTableData(table);
            if (tableData.length > 0) {
                results[`table_${index + 1}`] = {
                    type: 'table',
                    data: tableData,
                    headers: this.extractTableHeaders(table)
                };
            }
        });

        return results;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
     */
    getResultLabel(element) {
        // –ò—â–µ–º –º–µ—Ç–∫—É –≤ —Ç–æ–º –∂–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        const container = element.closest('.result-item, .metric, .calculation-row');
        if (container) {
            const labelEl = container.querySelector('.label, .metric-label, .result-label');
            if (labelEl && labelEl !== element) {
                return labelEl.textContent.trim();
            }
        }

        // –ò—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º
        const prev = element.previousElementSibling;
        if (prev && !prev.querySelector('input, button')) {
            return prev.textContent.trim();
        }

        return element.className || '–†–µ–∑—É–ª—å—Ç–∞—Ç';
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
     */
    getResultValue(element) {
        const text = element.textContent.trim();

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        const numberMatch = text.match(/([\d\s,.-]+)/);
        if (numberMatch) {
            const numStr = numberMatch[1].replace(/\s/g, '').replace(',', '.');
            const num = parseFloat(numStr);
            return isNaN(num) ? text : num;
        }

        return text;
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
     */
    detectResultType(element) {
        const text = element.textContent.toLowerCase();

        if (text.includes('‚ÇΩ') || text.includes('—Ä—É–±')) return 'currency';
        if (text.includes('%')) return 'percentage';
        if (text.includes('–ª–µ—Ç') || text.includes('–º–µ—Å')) return 'duration';

        return 'text';
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã
     */
    extractTableData(table) {
        const rows = table.querySelectorAll('tbody tr, tr');
        const data = [];

        rows.forEach(row => {
            const cells = row.querySelectorAll('td, th');
            if (cells.length > 0) {
                const rowData = {};
                cells.forEach((cell, index) => {
                    const header = this.getTableHeader(table, index) || `column_${index + 1}`;
                    rowData[header] = cell.textContent.trim();
                });
                data.push(rowData);
            }
        });

        return data;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
     */
    extractTableHeaders(table) {
        const headerRow = table.querySelector('thead tr, tr:first-child');
        if (!headerRow) return [];

        const headers = [];
        const cells = headerRow.querySelectorAll('th, td');
        cells.forEach(cell => {
            headers.push(cell.textContent.trim());
        });

        return headers;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
     */
    getTableHeader(table, columnIndex) {
        const headerRow = table.querySelector('thead tr, tr:first-child');
        if (!headerRow) return null;

        const headerCell = headerRow.querySelectorAll('th, td')[columnIndex];
        return headerCell ? headerCell.textContent.trim() : null;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
     */
    extractBreakdown() {
        const breakdown = {};

        // –ò—â–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
        const detailSections = document.querySelectorAll('.calculation-details, .breakdown, .detailed-results');

        detailSections.forEach((section, index) => {
            const title = section.querySelector('h3, h4, .section-title')?.textContent || `–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è ${index + 1}`;
            const items = [];

            const detailItems = section.querySelectorAll('.detail-item, .breakdown-item');
            detailItems.forEach(item => {
                const label = item.querySelector('.label, .item-label')?.textContent || '';
                const value = item.querySelector('.value, .item-value')?.textContent || item.textContent;

                items.push({ label: label.trim(), value: value.trim() });
            });

            if (items.length > 0) {
                breakdown[title] = items;
            }
        });

        return breakdown;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
     */
    extractChartsData() {
        const charts = [];

        // –ò—â–µ–º canvas —ç–ª–µ–º–µ–Ω—Ç—ã (Chart.js)
        const canvases = document.querySelectorAll('canvas[data-chart], .chart-container canvas');
        canvases.forEach((canvas, index) => {
            const chart = {
                id: canvas.id || `chart_${index + 1}`,
                type: canvas.dataset.chartType || 'unknown',
                title: this.getChartTitle(canvas),
                data: this.extractChartData(canvas)
            };
            charts.push(chart);
        });

        return charts;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
     */
    getChartTitle(canvas) {
        const container = canvas.closest('.chart-container, .chart-section');
        if (container) {
            const title = container.querySelector('h3, h4, .chart-title');
            if (title) return title.textContent.trim();
        }

        return canvas.dataset.title || '–ì—Ä–∞—Ñ–∏–∫';
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞
     */
    extractChartData(canvas) {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Chart.js
        if (canvas.chart && canvas.chart.data) {
            return {
                labels: canvas.chart.data.labels || [],
                datasets: canvas.chart.data.datasets || []
            };
        }

        // Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º placeholder
        return {
            note: '–î–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞'
        };
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    addResultsSheet(workbook, data) {
        const resultsData = [];

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
        resultsData.push({
            parameter: '–û–¢–ß–ï–¢ –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê –ú2',
            value: '',
            unit: ''
        });
        resultsData.push({
            parameter: '–¢–∏–ø –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞',
            value: data.title,
            unit: ''
        });
        resultsData.push({
            parameter: '–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞',
            value: new Date(data.timestamp).toLocaleDateString('ru-RU'),
            unit: ''
        });
        resultsData.push({ parameter: '', value: '', unit: '' }); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

        // –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        resultsData.push({
            parameter: '=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===',
            value: '',
            unit: ''
        });

        Object.entries(data.results).forEach(([key, result]) => {
            if (result.type !== 'table') {
                resultsData.push({
                    parameter: key,
                    value: result.value,
                    unit: this.getUnitByType(result.type)
                });
            }
        });

        resultsData.push({ parameter: '', value: '', unit: '' }); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        resultsData.push({
            parameter: '=== –ü–ê–†–ê–ú–ï–¢–†–´ ===',
            value: '',
            unit: ''
        });

        Object.entries(data.parameters).forEach(([key, param]) => {
            resultsData.push({
                parameter: param.label,
                value: param.value,
                unit: param.unit
            });
        });

        const worksheet = XLSX.utils.json_to_sheet(resultsData);
        this.applyResultsSheetFormatting(worksheet);
        XLSX.utils.book_append_sheet(workbook, worksheet, '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã');
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     */
    addParametersSheet(workbook, data) {
        const parametersData = Object.entries(data.parameters).map(([key, param]) => ({
            –ü–∞—Ä–∞–º–µ—Ç—Ä: param.label,
            –ó–Ω–∞—á–µ–Ω–∏–µ: param.value,
            –ï–¥–∏–Ω–∏—Ü–∞: param.unit,
            '–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∏–º—è': key
        }));

        const worksheet = XLSX.utils.json_to_sheet(parametersData);
        XLSX.utils.book_append_sheet(workbook, worksheet, '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã');
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
     */
    addBreakdownSheet(workbook, data) {
        const breakdownData = [];

        Object.entries(data.breakdown).forEach(([section, items]) => {
            breakdownData.push({
                –†–∞–∑–¥–µ–ª: section,
                –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å: '',
                –ó–Ω–∞—á–µ–Ω–∏–µ: ''
            });

            items.forEach(item => {
                breakdownData.push({
                    –†–∞–∑–¥–µ–ª: '',
                    –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å: item.label,
                    –ó–Ω–∞—á–µ–Ω–∏–µ: item.value
                });
            });

            breakdownData.push({ –†–∞–∑–¥–µ–ª: '', –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å: '', –ó–Ω–∞—á–µ–Ω–∏–µ: '' }); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        });

        const worksheet = XLSX.utils.json_to_sheet(breakdownData);
        XLSX.utils.book_append_sheet(workbook, worksheet, '–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è');
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
     */
    addChartsSheet(workbook, data) {
        const chartsData = [];

        chartsData.push({
            –ì—Ä–∞—Ñ–∏–∫: '–û–ü–ò–°–ê–ù–ò–ï –ì–†–ê–§–ò–ö–û–í',
            –¢–∏–ø: '',
            –î–∞–Ω–Ω—ã–µ: '–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞'
        });
        chartsData.push({ –ì—Ä–∞—Ñ–∏–∫: '', –¢–∏–ø: '', –î–∞–Ω–Ω—ã–µ: '' });

        data.charts.forEach(chart => {
            chartsData.push({
                –ì—Ä–∞—Ñ–∏–∫: chart.title,
                –¢–∏–ø: chart.type,
                –î–∞–Ω–Ω—ã–µ: JSON.stringify(chart.data, null, 2)
            });
        });

        if (chartsData.length > 2) {
            const worksheet = XLSX.utils.json_to_sheet(chartsData);
            XLSX.utils.book_append_sheet(workbook, worksheet, '–ì—Ä–∞—Ñ–∏–∫–∏');
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏
     */
    addFormulasSheet(workbook, data) {
        const formulas = this.getCalculationFormulas(data.type);

        const formulasData = formulas.map(formula => ({
            –†–∞—Å—á–µ—Ç: formula.name,
            –§–æ—Ä–º—É–ª–∞: formula.formula,
            –û–ø–∏—Å–∞–Ω–∏–µ: formula.description,
            –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: formula.variables || ''
        }));

        if (formulasData.length > 0) {
            const worksheet = XLSX.utils.json_to_sheet(formulasData);
            XLSX.utils.book_append_sheet(workbook, worksheet, '–§–æ—Ä–º—É–ª—ã');
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª —Ä–∞—Å—á–µ—Ç–∞ –ø–æ —Ç–∏–ø—É –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
     */
    getCalculationFormulas(calculatorType) {
        const formulas = {
            mortgage: [
                {
                    name: '–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂',
                    formula: '–ï–ü = –° √ó (i √ó (1 + i)^n) / ((1 + i)^n - 1)',
                    description: '–ê–Ω–Ω—É–∏—Ç–µ—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –ø–æ –∏–ø–æ—Ç–µ–∫–µ',
                    variables: '–° - —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞, i - –º–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞, n - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤'
                },
                {
                    name: '–û–±—â–∞—è –ø–µ—Ä–µ–ø–ª–∞—Ç–∞',
                    formula: '–ü–µ—Ä–µ–ø–ª–∞—Ç–∞ = (–ï–ü √ó n) - –°',
                    description: '–û–±—â–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–ø–ª–∞—Ç—ã –ø–æ –∫—Ä–µ–¥–∏—Ç—É',
                    variables: '–ï–ü - –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂, n - —Å—Ä–æ–∫ –≤ –º–µ—Å—è—Ü–∞—Ö, –° - —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞'
                }
            ],
            rental: [
                {
                    name: '–í–∞–ª–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å',
                    formula: '–í–î = (–ê—Ä–µ–Ω–¥–∞ √ó 12) / –°—Ç–æ–∏–º–æ—Å—Ç—å √ó 100%',
                    description: '–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –±–µ–∑ —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤',
                    variables: '–ê—Ä–µ–Ω–¥–∞ - –º–µ—Å—è—á–Ω–∞—è –∞—Ä–µ–Ω–¥–Ω–∞—è –ø–ª–∞—Ç–∞'
                },
                {
                    name: '–ß–∏—Å—Ç–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å',
                    formula: '–ß–î = ((–ê—Ä–µ–Ω–¥–∞ √ó 12) - –†–∞—Å—Ö–æ–¥—ã) / –°—Ç–æ–∏–º–æ—Å—Ç—å √ó 100%',
                    description: '–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤',
                    variables: '–†–∞—Å—Ö–æ–¥—ã - –≥–æ–¥–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ'
                }
            ]
        };

        return formulas[calculatorType] || [];
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
     */
    async exportScenarioComparison() {
        try {
            const scenarios = this.getComparisonScenarios();
            if (!scenarios || scenarios.length < 2) {
                this.showNotification('–ù–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞', 'warning');
                return;
            }

            const workbook = XLSX.utils.book_new();

            // –õ–∏—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            this.addComparisonSheet(workbook, scenarios);

            // –õ–∏—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
            scenarios.forEach((scenario, index) => {
                this.addScenarioSheet(workbook, scenario, index + 1);
            });

            // –õ–∏—Å—Ç –≤—ã–≤–æ–¥–æ–≤
            this.addInsightsSheet(workbook, scenarios);

            const filename = `scenario_comparison_${new Date().toISOString().split('T')[0]}.xlsx`;
            XLSX.writeFile(workbook, filename);

            this.showNotification('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ', 'success');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è', 'error');
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     */
    getComparisonScenarios() {
        if (window.scenarioComparison) {
            return Array.from(window.scenarioComparison.scenarios.values());
        }
        return [];
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     */
    addComparisonSheet(workbook, scenarios) {
        const comparisonData = [];

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        const headerRow = { –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å: '–ü–û–ö–ê–ó–ê–¢–ï–õ–¨' };
        scenarios.forEach((scenario, index) => {
            headerRow[`scenario_${index + 1}`] = scenario.name;
        });
        comparisonData.push(headerRow);

        // –î–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é
        const firstScenario = scenarios[0];
        const metrics = Object.keys(firstScenario.results);

        metrics.forEach(metric => {
            const row = { –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å: this.getMetricDisplayName(metric) };

            scenarios.forEach((scenario, index) => {
                const value = scenario.results[metric];
                row[`scenario_${index + 1}`] = this.formatMetricForExcel(value, metric);
            });

            comparisonData.push(row);
        });

        const worksheet = XLSX.utils.json_to_sheet(comparisonData);
        XLSX.utils.book_append_sheet(workbook, worksheet, '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ');
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
     */
    addScenarioSheet(workbook, scenario, number) {
        const scenarioData = [];

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è
        scenarioData.push({
            –ü–∞—Ä–∞–º–µ—Ç—Ä: `–°–¶–ï–ù–ê–†–ò–ô: ${scenario.name}`,
            –ó–Ω–∞—á–µ–Ω–∏–µ: '',
            –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: `–°–æ–∑–¥–∞–Ω: ${new Date(scenario.createdAt).toLocaleDateString('ru-RU')}`
        });
        scenarioData.push({ –ü–∞—Ä–∞–º–µ—Ç—Ä: '', –ó–Ω–∞—á–µ–Ω–∏–µ: '', –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: '' });

        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        scenarioData.push({ –ü–∞—Ä–∞–º–µ—Ç—Ä: '=== –ü–ê–†–ê–ú–ï–¢–†–´ ===', –ó–Ω–∞—á–µ–Ω–∏–µ: '', –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: '' });
        Object.entries(scenario.params).forEach(([key, value]) => {
            scenarioData.push({
                –ü–∞—Ä–∞–º–µ—Ç—Ä: this.getParameterDisplayName(key),
                –ó–Ω–∞—á–µ–Ω–∏–µ: value,
                –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: this.getParameterNote(key, value)
            });
        });

        scenarioData.push({ –ü–∞—Ä–∞–º–µ—Ç—Ä: '', –ó–Ω–∞—á–µ–Ω–∏–µ: '', –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: '' });

        // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        scenarioData.push({ –ü–∞—Ä–∞–º–µ—Ç—Ä: '=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===', –ó–Ω–∞—á–µ–Ω–∏–µ: '', –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: '' });
        Object.entries(scenario.results).forEach(([key, value]) => {
            scenarioData.push({
                –ü–∞—Ä–∞–º–µ—Ç—Ä: this.getMetricDisplayName(key),
                –ó–Ω–∞—á–µ–Ω–∏–µ: this.formatMetricForExcel(value, key),
                –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: this.getResultNote(key, value)
            });
        });

        const worksheet = XLSX.utils.json_to_sheet(scenarioData);
        XLSX.utils.book_append_sheet(workbook, worksheet, `–°—Ü–µ–Ω–∞—Ä–∏–π ${number}`);
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å –≤—ã–≤–æ–¥–∞–º–∏
     */
    addInsightsSheet(workbook, scenarios) {
        const insights = this.generateComparisonInsights(scenarios);

        const insightsData = insights.map((insight, index) => ({
            '‚Ññ': index + 1,
            –í—ã–≤–æ–¥: insight.title,
            –û–ø–∏—Å–∞–Ω–∏–µ: insight.description,
            –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: insight.recommendation || ''
        }));

        const worksheet = XLSX.utils.json_to_sheet(insightsData);
        XLSX.utils.book_append_sheet(workbook, worksheet, '–í—ã–≤–æ–¥—ã');
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     */
    generateComparisonInsights(scenarios) {
        const insights = [];

        // –õ—É—á—à–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º –º–µ—Ç—Ä–∏–∫–∞–º
        const keyMetrics = ['monthlyPayment', 'totalInterest', 'netYield', 'roi'];

        keyMetrics.forEach(metric => {
            const scenariosWithMetric = scenarios.filter(s => s.results[metric] !== undefined);
            if (scenariosWithMetric.length < 2) return;

            const best = this.findBestScenario(scenariosWithMetric, metric);
            if (best) {
                insights.push({
                    title: `–õ—É—á—à–∏–π –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é "${this.getMetricDisplayName(metric)}"`,
                    description: `–°—Ü–µ–Ω–∞—Ä–∏–π "${best.name}" –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ`,
                    recommendation: this.getMetricRecommendation(metric, best.results[metric])
                });
            }
        });

        // –≠–∫–æ–Ω–æ–º–∏—è –∏–ª–∏ –ø–æ—Ç–µ—Ä–∏
        const savings = this.calculateSavings(scenarios);
        if (savings.amount > 0) {
            insights.push({
                title: '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è',
                description: `–ü—Ä–∏ –≤—ã–±–æ—Ä–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –º–æ–∂–Ω–æ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å ${this.formatNumber(savings.amount)} ‚ÇΩ`,
                recommendation: `–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π "${savings.bestScenario}"`
            });
        }

        return insights;
    }

    /**
     * –ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ –º–µ—Ç—Ä–∏–∫–µ
     */
    findBestScenario(scenarios, metric) {
        const lowerIsBetter = ['totalInterest', 'monthlyPayment', 'expenses'];

        if (lowerIsBetter.includes(metric)) {
            return scenarios.reduce((best, current) =>
                current.results[metric] < best.results[metric] ? current : best
            );
        } else {
            return scenarios.reduce((best, current) =>
                current.results[metric] > best.results[metric] ? current : best
            );
        }
    }

    /**
     * –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∏
     */
    calculateSavings(scenarios) {
        if (scenarios.length < 2) return { amount: 0 };

        // –ò—â–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å "–æ–±—â–∞—è –ø–µ—Ä–µ–ø–ª–∞—Ç–∞" –∏–ª–∏ "–æ–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã"
        const costMetrics = ['totalInterest', 'totalPayment', 'totalCost'];
        let relevantMetric = null;

        for (const metric of costMetrics) {
            if (scenarios[0].results[metric] !== undefined) {
                relevantMetric = metric;
                break;
            }
        }

        if (!relevantMetric) return { amount: 0 };

        const costs = scenarios.map(s => ({ name: s.name, cost: s.results[relevantMetric] }));
        const minCost = Math.min(...costs.map(c => c.cost));
        const maxCost = Math.max(...costs.map(c => c.cost));

        return {
            amount: maxCost - minCost,
            bestScenario: costs.find(c => c.cost === minCost)?.name
        };
    }

    /**
     * –î–µ—Ç–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º
     */
    async exportDetailedAnalysis() {
        try {
            const data = this.extractCalculatorData();
            const workbook = XLSX.utils.book_new();

            // –û—Å–Ω–æ–≤–Ω—ã–µ –ª–∏—Å—Ç—ã
            this.addResultsSheet(workbook, data);
            this.addParametersSheet(workbook, data);

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ª–∏—Å—Ç—ã
            this.addSensitivityAnalysisSheet(workbook, data);
            this.addBenchmarkSheet(workbook, data);
            this.addRiskAnalysisSheet(workbook, data);

            const filename = `detailed_analysis_${data.type}_${new Date().toISOString().split('T')[0]}.xlsx`;
            XLSX.writeFile(workbook, filename);

            this.showNotification('–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω', 'success');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞', 'error');
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    addSensitivityAnalysisSheet(workbook, data) {
        if (data.type !== 'mortgage') return;

        const baseRate = data.parameters.interestRate?.value || 10;
        const baseLoan = data.parameters.loanAmount?.value || 3000000;
        const baseTerm = data.parameters.loanTerm?.value || 20;

        const sensitivityData = [];

        // –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏
        sensitivityData.push({ –ü–∞—Ä–∞–º–µ—Ç—Ä: '–ê–ù–ê–õ–ò–ó –ß–£–í–°–¢–í–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ö –°–¢–ê–í–ö–ï', –ò–∑–º–µ–Ω–µ–Ω–∏–µ: '', '–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂': '', –†–∞–∑–Ω–∏—Ü–∞: '' });

        [-2, -1, -0.5, 0, 0.5, 1, 2].forEach(change => {
            const newRate = baseRate + change;
            const newPayment = this.calculateMortgagePayment(baseLoan, newRate, baseTerm);
            const basePayment = this.calculateMortgagePayment(baseLoan, baseRate, baseTerm);

            sensitivityData.push({
                –ü–∞—Ä–∞–º–µ—Ç—Ä: `–°—Ç–∞–≤–∫–∞ ${newRate}%`,
                –ò–∑–º–µ–Ω–µ–Ω–∏–µ: change > 0 ? `+${change}%` : `${change}%`,
                '–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂': Math.round(newPayment),
                –†–∞–∑–Ω–∏—Ü–∞: Math.round(newPayment - basePayment)
            });
        });

        const worksheet = XLSX.utils.json_to_sheet(sensitivityData);
        XLSX.utils.book_append_sheet(workbook, worksheet, '–ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
    }

    /**
     * –†–∞—Å—á–µ—Ç –∏–ø–æ—Ç–µ—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
     */
    calculateMortgagePayment(amount, rate, years) {
        const monthlyRate = rate / 100 / 12;
        const numPayments = years * 12;

        return amount * (monthlyRate * Math.pow(1 + monthlyRate, numPayments)) / (Math.pow(1 + monthlyRate, numPayments) - 1);
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
     */
    addBenchmarkSheet(workbook, data) {
        const benchmarks = this.getBenchmarkData(data.type);

        if (benchmarks.length > 0) {
            const worksheet = XLSX.utils.json_to_sheet(benchmarks);
            XLSX.utils.book_append_sheet(workbook, worksheet, '–ë–µ–Ω—á–º–∞—Ä–∫–∏');
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
     */
    getBenchmarkData(calculatorType) {
        const benchmarks = {
            mortgage: [
                { –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å: '–°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞ –ø–æ –∏–ø–æ—Ç–µ–∫–µ', –ó–Ω–∞—á–µ–Ω–∏–µ: '12.5%', –ò—Å—Ç–æ—á–Ω–∏–∫: '–¶–ë –†–§' },
                { –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å', –ó–Ω–∞—á–µ–Ω–∏–µ: '20%', –ò—Å—Ç–æ—á–Ω–∏–∫: '–ë–∞–Ω–∫–∏' },
                { –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ª–≥–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞', –ó–Ω–∞—á–µ–Ω–∏–µ: '45%', –ò—Å—Ç–æ—á–Ω–∏–∫: '–¶–ë –†–§' }
            ],
            rental: [
                { –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å: '–°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', –ó–Ω–∞—á–µ–Ω–∏–µ: '6-8%', –ò—Å—Ç–æ—á–Ω–∏–∫: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ú2' },
                { –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å: '–î–µ–ø–æ–∑–∏—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞', –ó–Ω–∞—á–µ–Ω–∏–µ: '8%', –ò—Å—Ç–æ—á–Ω–∏–∫: '–ë–∞–Ω–∫–∏' },
                { –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å: '–ò–Ω—Ñ–ª—è—Ü–∏—è', –ó–Ω–∞—á–µ–Ω–∏–µ: '5-6%', –ò—Å—Ç–æ—á–Ω–∏–∫: '–†–æ—Å—Å—Ç–∞—Ç' }
            ]
        };

        return benchmarks[calculatorType] || [];
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤
     */
    addRiskAnalysisSheet(workbook, data) {
        const risks = this.analyzeRisks(data);

        if (risks.length > 0) {
            const riskData = risks.map(risk => ({
                –†–∏—Å–∫: risk.name,
                –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: risk.probability,
                –í–ª–∏—è–Ω–∏–µ: risk.impact,
                –û–ø–∏—Å–∞–Ω–∏–µ: risk.description,
                –ú–∏—Ç–∏–≥–∞—Ü–∏—è: risk.mitigation
            }));

            const worksheet = XLSX.utils.json_to_sheet(riskData);
            XLSX.utils.book_append_sheet(workbook, worksheet, '–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤');
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
     */
    analyzeRisks(data) {
        const risks = [];

        if (data.type === 'mortgage') {
            const debtRatio = this.calculateDebtRatio(data);
            if (debtRatio > 0.4) {
                risks.push({
                    name: '–í—ã—Å–æ–∫–∞—è –¥–æ–ª–≥–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞',
                    probability: '–í—ã—Å–æ–∫–∞—è',
                    impact: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π',
                    description: `–î–æ–ª–≥–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ ${(debtRatio * 100).toFixed(1)}% –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ 40%`,
                    mitigation: '–£–≤–µ–ª–∏—á–∏—Ç—å –¥–æ—Ö–æ–¥ –∏–ª–∏ —Å–Ω–∏–∑–∏—Ç—å —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞'
                });
            }
        }

        if (data.type === 'rental') {
            const yield = data.results.netYield?.value;
            if (yield < 4) {
                risks.push({
                    name: '–ù–∏–∑–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å',
                    probability: '–°—Ä–µ–¥–Ω—è—è',
                    impact: '–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π',
                    description: `–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å ${yield}% –Ω–∏–∂–µ –∏–Ω—Ñ–ª—è—Ü–∏–∏`,
                    mitigation: '–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Ä–µ–Ω–¥–Ω—É—é —Å—Ç–∞–≤–∫—É –∏–ª–∏ –æ–±—ä–µ–∫—Ç'
                });
            }
        }

        return risks;
    }

    /**
     * –†–∞—Å—á–µ—Ç –¥–æ–ª–≥–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
     */
    calculateDebtRatio(data) {
        const monthlyPayment = data.results.monthlyPayment?.value || 0;
        const income = data.parameters.income?.value || 0;

        return income > 0 ? monthlyPayment / income : 0;
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    formatNumber(num) {
        return new Intl.NumberFormat('ru-RU').format(Math.round(num));
    }

    formatMetricForExcel(value, metric) {
        if (typeof value !== 'number') return value;

        if (metric.includes('Rate') || metric.includes('Yield')) {
            return `${value.toFixed(2)}%`;
        }

        return this.formatNumber(value);
    }

    getMetricDisplayName(key) {
        const names = {
            monthlyPayment: '–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂',
            totalPayment: '–û–±—â–∞—è —Å—É–º–º–∞',
            totalInterest: '–ü–µ—Ä–µ–ø–ª–∞—Ç–∞',
            netYield: '–ß–∏—Å—Ç–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å',
            grossYield: '–í–∞–ª–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å',
            roi: 'ROI'
        };

        return names[key] || key;
    }

    getParameterDisplayName(key) {
        const names = {
            loanAmount: '–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞',
            interestRate: '–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞',
            loanTerm: '–°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞',
            propertyPrice: '–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
            monthlyRent: '–ê—Ä–µ–Ω–¥–Ω–∞—è –ø–ª–∞—Ç–∞'
        };

        return names[key] || key;
    }

    getParameterNote(key, value) {
        if (key === 'interestRate') return '–ì–æ–¥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞';
        if (key === 'loanTerm') return '–í –≥–æ–¥–∞—Ö';
        return '';
    }

    getResultNote(key, value) {
        if (key.includes('Payment') || key.includes('Amount')) return '–í —Ä—É–±–ª—è—Ö';
        if (key.includes('Rate') || key.includes('Yield')) return '–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å';
        return '';
    }

    getUnitByType(type) {
        const units = {
            currency: '‚ÇΩ',
            percentage: '%',
            duration: ''
        };

        return units[type] || '';
    }

    getMetricRecommendation(metric, value) {
        if (metric === 'netYield') {
            if (value > 10) return '–û—Ç–ª–∏—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å';
            if (value > 6) return '–•–æ—Ä–æ—à–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å';
            return '–ù–∏–∑–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å';
        }

        return '';
    }

    applyResultsSheetFormatting(worksheet) {
        // –ë–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–∏–ª–∏ —è—á–µ–µ–∫
    }

    createStyles() {
        return {
            header: { bold: true, size: 14 },
            subheader: { bold: true, size: 12 },
            currency: { numFmt: '#,##0.00 "‚ÇΩ"' },
            percentage: { numFmt: '0.00%' }
        };
    }

    downloadBlob(blob, filename) {
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    showNotification(message, type) {
        if (window.scenarioComparison?.showNotification) {
            window.scenarioComparison.showNotification(message, type);
        } else {
            console.log(`${type.toUpperCase()}: ${message}`);
            alert(message);
        }
    }
}

// CSS —Å—Ç–∏–ª–∏ –¥–ª—è Excel —ç–∫—Å–ø–æ—Ä—Ç–∞
const excelExportStyles = `
<style>
.excel-export-controls {
    background: #f8f9fa;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    padding: 15px;
    margin-top: 20px;
}

.export-buttons-group {
    display: flex;
    gap: 10px;
    margin-bottom: 15px;
    flex-wrap: wrap;
}

.export-excel-btn,
.export-detailed-excel-btn,
.export-comparison-excel-btn {
    background: #28a745;
    color: white;
    border: none;
    padding: 10px 16px;
    border-radius: 6px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 0.9em;
    transition: all 0.2s;
}

.export-excel-btn:hover {
    background: #218838;
    transform: translateY(-1px);
}

.export-detailed-excel-btn {
    background: #17a2b8;
}

.export-detailed-excel-btn:hover {
    background: #138496;
}

.export-comparison-excel-btn {
    background: #6f42c1;
}

.export-comparison-excel-btn:hover {
    background: #5a36a3;
}

.export-options {
    display: flex;
    gap: 15px;
    flex-wrap: wrap;
    padding-top: 10px;
    border-top: 1px solid #e9ecef;
}

.export-option {
    display: flex;
    align-items: center;
    gap: 6px;
    font-size: 0.9em;
    cursor: pointer;
    user-select: none;
}

.export-option input[type="checkbox"] {
    margin: 0;
}

.export-option:hover {
    color: #3416b6;
}

@media (max-width: 768px) {
    .export-buttons-group {
        flex-direction: column;
    }

    .export-options {
        flex-direction: column;
        gap: 8px;
    }
}
</style>
`;

// –ò–Ω—ä–µ–∫—Ü–∏—è —Å—Ç–∏–ª–µ–π
if (!document.querySelector('#excel-export-styles')) {
    const styleElement = document.createElement('div');
    styleElement.id = 'excel-export-styles';
    styleElement.innerHTML = excelExportStyles;
    document.head.appendChild(styleElement.firstElementChild);
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.ExcelExporter = ExcelExporter;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', async () => {
        window.excelExporter = new ExcelExporter();
        await window.excelExporter.init();
    });
} else {
    setTimeout(async () => {
        window.excelExporter = new ExcelExporter();
        await window.excelExporter.init();
    }, 0);
}

export { ExcelExporter };