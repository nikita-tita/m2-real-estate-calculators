/**
 * Calculation Templates - —Å–∏—Å—Ç–µ–º–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤ –ú2
 * –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ç–∏–ø–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
 */

class CalculationTemplates {
    constructor() {
        this.templates = new Map();
        this.userTemplates = new Map();
        this.storageKey = 'm2_calculation_templates';
        this.currentCalculatorType = null;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —à–∞–±–ª–æ–Ω–æ–≤
     */
    init() {
        this.currentCalculatorType = this.detectCalculatorType();
        this.setupDefaultTemplates();
        this.loadUserTemplates();
        this.injectTemplateUI();
        this.setupEventListeners();

        console.log('üìÑ –°–∏—Å—Ç–µ–º–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
     */
    detectCalculatorType() {
        const url = window.location.pathname;
        const title = document.title.toLowerCase();

        if (url.includes('mortgage') || title.includes('–∏–ø–æ—Ç–µ–∫')) return 'mortgage';
        if (url.includes('rental') || title.includes('–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç')) return 'rental';
        if (url.includes('rent') && url.includes('buy')) return 'rent_vs_buy';
        if (url.includes('prepayment') || title.includes('–¥–æ—Å—Ä–æ—á–Ω')) return 'prepayment';
        if (url.includes('affordability') || title.includes('–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç')) return 'affordability';
        if (url.includes('airbnb') || title.includes('–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω')) return 'airbnb';

        return 'generic';
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
     */
    setupDefaultTemplates() {
        // –®–∞–±–ª–æ–Ω—ã –¥–ª—è –∏–ø–æ—Ç–µ—á–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        if (this.currentCalculatorType === 'mortgage') {
            this.templates.set('mortgage_first_time', {
                name: 'üë∂ –ü–µ—Ä–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞',
                description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –∂–∏–ª—å—è',
                category: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ',
                icon: 'üè†',
                params: {
                    propertyPrice: 5000000,
                    downPayment: 1000000,
                    loanAmount: 4000000,
                    interestRate: 13.5,
                    loanTerm: 20,
                    income: 100000
                },
                tags: ['–ø–µ—Ä–≤–æ–µ –∂–∏–ª—å–µ', '–º–æ–ª–æ–¥–∞—è —Å–µ–º—å—è', '—Å—Ç–∞–Ω–¥–∞—Ä—Ç']
            });

            this.templates.set('mortgage_family', {
                name: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π–Ω–∞—è –∏–ø–æ—Ç–µ–∫–∞',
                description: '–õ—å–≥–æ—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è —Å–µ–º–µ–π —Å –¥–µ—Ç—å–º–∏',
                category: '–õ—å–≥–æ—Ç–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã',
                icon: 'üë∂',
                params: {
                    propertyPrice: 7000000,
                    downPayment: 1400000,
                    loanAmount: 5600000,
                    interestRate: 6.0,
                    loanTerm: 20,
                    income: 150000,
                    hasChildren: true,
                    familyMortgage: true
                },
                tags: ['—Å–µ–º–µ–π–Ω–∞—è –∏–ø–æ—Ç–µ–∫–∞', '–ª—å–≥–æ—Ç—ã', '–¥–µ—Ç–∏']
            });

            this.templates.set('mortgage_it', {
                name: 'üíª IT-–∏–ø–æ—Ç–µ–∫–∞',
                description: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤',
                category: '–õ—å–≥–æ—Ç–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã',
                icon: '‚ö°',
                params: {
                    propertyPrice: 12000000,
                    downPayment: 2400000,
                    loanAmount: 9600000,
                    interestRate: 5.0,
                    loanTerm: 20,
                    income: 300000,
                    itMortgage: true
                },
                tags: ['IT –∏–ø–æ—Ç–µ–∫–∞', '–ª—å–≥–æ—Ç—ã', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏']
            });

            this.templates.set('mortgage_refinance', {
                name: 'üîÑ –†–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ',
                description: '–ü–µ—Ä–µ–∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–π–º–∞',
                category: '–†–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ',
                icon: 'üîÄ',
                params: {
                    loanAmount: 3500000,
                    interestRate: 11.5,
                    loanTerm: 15,
                    currentRate: 14.5,
                    refinancing: true
                },
                tags: ['—Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ', '—ç–∫–æ–Ω–æ–º–∏—è', '—Å–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏']
            });

            this.templates.set('mortgage_premium', {
                name: 'üíé –ü—Ä–µ–º–∏—É–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
                description: '–ü–æ–∫—É–ø–∫–∞ –¥–æ—Ä–æ–≥–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
                category: '–ü—Ä–µ–º–∏—É–º',
                icon: 'üè∞',
                params: {
                    propertyPrice: 25000000,
                    downPayment: 7500000,
                    loanAmount: 17500000,
                    interestRate: 12.0,
                    loanTerm: 25,
                    income: 500000
                },
                tags: ['–ø—Ä–µ–º–∏—É–º', '—ç–ª–∏—Ç–Ω–æ–µ –∂–∏–ª—å–µ', '–±–æ–ª—å—à–∞—è —Å—É–º–º–∞']
            });
        }

        // –®–∞–±–ª–æ–Ω—ã –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        if (this.currentCalculatorType === 'rental') {
            this.templates.set('rental_studio', {
                name: 'üè† –°—Ç—É–¥–∏—è –≤ —Ü–µ–Ω—Ç—Ä–µ',
                description: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ —Å—Ç—É–¥–∏—é –¥–ª—è —Å–¥–∞—á–∏ –≤ –∞—Ä–µ–Ω–¥—É',
                category: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ',
                icon: 'üè¢',
                params: {
                    propertyPrice: 4000000,
                    monthlyRent: 35000,
                    managementFee: 10,
                    repairs: 50000,
                    taxes: 24000,
                    vacancy: 5
                },
                tags: ['—Å—Ç—É–¥–∏—è', '—Ü–µ–Ω—Ç—Ä', '–∞—Ä–µ–Ω–¥–∞']
            });

            this.templates.set('rental_apartment', {
                name: 'üè† 2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞',
                description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–≤—É—à–∫–∞ –≤ —Å–ø–∞–ª—å–Ω–æ–º —Ä–∞–π–æ–Ω–µ',
                category: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ',
                icon: 'üèòÔ∏è',
                params: {
                    propertyPrice: 7500000,
                    monthlyRent: 55000,
                    managementFee: 8,
                    repairs: 80000,
                    taxes: 45000,
                    vacancy: 3
                },
                tags: ['2–∫ –∫–≤–∞—Ä—Ç–∏—Ä–∞', '—Å–ø–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω', '—Å–µ–º—å–∏']
            });

            this.templates.set('rental_commercial', {
                name: 'üè¢ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
                description: '–û—Ñ–∏—Å–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ –ø–æ–¥ –∞—Ä–µ–Ω–¥—É',
                category: '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è',
                icon: 'üè¢',
                params: {
                    propertyPrice: 15000000,
                    monthlyRent: 120000,
                    managementFee: 15,
                    repairs: 200000,
                    taxes: 300000,
                    vacancy: 10
                },
                tags: ['–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è', '–æ—Ñ–∏—Å', '–±–∏–∑–Ω–µ—Å']
            });

            this.templates.set('rental_suburban', {
                name: 'üè° –ó–∞–≥–æ—Ä–æ–¥–Ω—ã–π –¥–æ–º',
                description: '–î–æ–º –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥—ã',
                category: '–ó–∞–≥–æ—Ä–æ–¥–Ω–∞—è',
                icon: 'üå≤',
                params: {
                    propertyPrice: 12000000,
                    monthlyRent: 80000,
                    managementFee: 5,
                    repairs: 150000,
                    taxes: 60000,
                    vacancy: 8,
                    utilities: 120000
                },
                tags: ['–∑–∞–≥–æ—Ä–æ–¥–Ω—ã–π –¥–æ–º', '–ø—Ä–∏–≥–æ—Ä–æ–¥', '—Å–µ–º—å–∏']
            });
        }

        // –®–∞–±–ª–æ–Ω—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã –∏ –ø–æ–∫—É–ø–∫–∏
        if (this.currentCalculatorType === 'rent_vs_buy') {
            this.templates.set('rvb_young_professional', {
                name: 'üéì –ú–æ–ª–æ–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
                description: '–í—ã–±–æ—Ä –º–µ–∂–¥—É –∞—Ä–µ–Ω–¥–æ–π –∏ –ø–æ–∫—É–ø–∫–æ–π –¥–ª—è –º–æ–ª–æ–¥–æ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞',
                category: '–ñ–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏',
                icon: 'üë®‚Äçüíº',
                params: {
                    propertyPrice: 6000000,
                    downPayment: 1200000,
                    monthlyRent: 45000,
                    interestRate: 13.5,
                    rentIncrease: 5,
                    propertyAppreciation: 3,
                    timeHorizon: 7
                },
                tags: ['–º–æ–ª–æ–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', '–∫–∞—Ä—å–µ—Ä–∞', '–º–æ–±–∏–ª—å–Ω–æ—Å—Ç—å']
            });

            this.templates.set('rvb_family_settling', {
                name: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è —Å –¥–µ—Ç—å–º–∏',
                description: '–°–µ–º—å—è —Ä–µ—à–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–∫—É–ø–∫–∏ vs –∞—Ä–µ–Ω–¥—ã',
                category: '–ñ–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏',
                icon: 'üë∂',
                params: {
                    propertyPrice: 8500000,
                    downPayment: 2550000,
                    monthlyRent: 65000,
                    interestRate: 6.0,
                    rentIncrease: 4,
                    propertyAppreciation: 4,
                    timeHorizon: 15
                },
                tags: ['—Å–µ–º—å—è', '–¥–µ—Ç–∏', '—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å']
            });

            this.templates.set('rvb_retirement', {
                name: 'üë¥ –ü—Ä–µ–¥–ø–µ–Ω—Å–∏–æ–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç',
                description: '–†–µ—à–µ–Ω–∏–µ –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –Ω–∞ –ø–µ–Ω—Å–∏—é',
                category: '–ñ–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏',
                icon: 'üèñÔ∏è',
                params: {
                    propertyPrice: 5000000,
                    downPayment: 2500000,
                    monthlyRent: 40000,
                    interestRate: 12.0,
                    rentIncrease: 3,
                    propertyAppreciation: 2,
                    timeHorizon: 10
                },
                tags: ['–ø–µ–Ω—Å–∏—è', '–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è', '–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥']
            });
        }

        // –®–∞–±–ª–æ–Ω—ã –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥—ã
        if (this.currentCalculatorType === 'airbnb') {
            this.templates.set('airbnb_city_center', {
                name: 'üèôÔ∏è –ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –≤ —Ü–µ–Ω—Ç—Ä–µ',
                description: '–ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º —Ü–µ–Ω—Ç—Ä–µ –¥–ª—è —Ç—É—Ä–∏—Å—Ç–æ–≤',
                category: '–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∑–æ–Ω—ã',
                icon: 'üó∫Ô∏è',
                params: {
                    propertyPrice: 8000000,
                    dailyRate: 4500,
                    occupancyRate: 65,
                    cleaningFee: 2000,
                    platformFee: 12,
                    managementFee: 20,
                    utilities: 8000
                },
                tags: ['—Ü–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞', '—Ç—É—Ä–∏—Å—Ç—ã', '–≤—ã—Å–æ–∫–∏–π –¥–æ—Ö–æ–¥']
            });

            this.templates.set('airbnb_business_district', {
                name: 'üíº –ë–∏–∑–Ω–µ—Å-—Ä–∞–π–æ–Ω',
                description: '–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã—Ö',
                category: '–ë–∏–∑–Ω–µ—Å',
                icon: 'üè¢',
                params: {
                    propertyPrice: 12000000,
                    dailyRate: 6000,
                    occupancyRate: 55,
                    cleaningFee: 2500,
                    platformFee: 10,
                    managementFee: 15,
                    utilities: 12000
                },
                tags: ['–±–∏–∑–Ω–µ—Å-—Ä–∞–π–æ–Ω', '–∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–µ', '–ø—Ä–µ–º–∏—É–º']
            });

            this.templates.set('airbnb_resort', {
                name: 'üèñÔ∏è –ö—É—Ä–æ—Ä—Ç–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
                description: '–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –≤ –∫—É—Ä–æ—Ä—Ç–Ω–æ–π –∑–æ–Ω–µ',
                category: '–ö—É—Ä–æ—Ä—Ç—ã',
                icon: 'üåä',
                params: {
                    propertyPrice: 15000000,
                    dailyRate: 8000,
                    occupancyRate: 45,
                    cleaningFee: 3000,
                    platformFee: 15,
                    managementFee: 25,
                    utilities: 15000,
                    seasonal: true
                },
                tags: ['–∫—É—Ä–æ—Ä—Ç', '—Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å', '–æ—Ç–¥—ã—Ö']
            });
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤
     */
    loadUserTemplates() {
        try {
            const saved = localStorage.getItem(this.storageKey);
            if (saved) {
                const templates = JSON.parse(saved);
                this.userTemplates = new Map(Object.entries(templates));
            }
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã:', error);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤
     */
    saveUserTemplates() {
        try {
            const templatesObj = Object.fromEntries(this.userTemplates);
            localStorage.setItem(this.storageKey, JSON.stringify(templatesObj));
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã:', error);
        }
    }

    /**
     * –í–Ω–µ–¥—Ä–µ–Ω–∏–µ UI –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏
     */
    injectTemplateUI() {
        const calculatorContainer = document.querySelector('.calculator-container, form, .input-section');
        if (!calculatorContainer) return;

        const templatePanel = document.createElement('div');
        templatePanel.className = 'template-panel';
        templatePanel.innerHTML = `
            <div class="template-header">
                <h3>üìÑ –®–∞–±–ª–æ–Ω—ã —Ä–∞—Å—á–µ—Ç–æ–≤</h3>
                <div class="template-actions">
                    <button class="toggle-templates-btn" title="–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —à–∞–±–ª–æ–Ω—ã">
                        <i class="feather-icon" data-feather="folder"></i>
                    </button>
                    <button class="save-template-btn" title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∫ —à–∞–±–ª–æ–Ω">
                        <i class="feather-icon" data-feather="save"></i>
                        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    </button>
                </div>
            </div>
            <div class="template-content" style="display: none;">
                <div class="template-categories"></div>
                <div class="template-search">
                    <input type="text" placeholder="–ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤..." id="template-search">
                    <i class="feather-icon" data-feather="search"></i>
                </div>
                <div class="template-list"></div>
            </div>
        `;

        // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        calculatorContainer.insertBefore(templatePanel, calculatorContainer.firstChild);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏
        if (typeof feather !== 'undefined') {
            feather.replace();
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã
        this.renderTemplates();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        document.addEventListener('click', (e) => {
            if (e.target.matches('.toggle-templates-btn')) {
                this.toggleTemplatePanel();
            }

            if (e.target.matches('.save-template-btn')) {
                this.showSaveTemplateDialog();
            }

            if (e.target.matches('.template-item')) {
                const templateId = e.target.dataset.templateId;
                this.applyTemplate(templateId);
            }

            if (e.target.matches('.delete-template-btn')) {
                e.stopPropagation();
                const templateId = e.target.dataset.templateId;
                this.deleteTemplate(templateId);
            }

            if (e.target.matches('.edit-template-btn')) {
                e.stopPropagation();
                const templateId = e.target.dataset.templateId;
                this.editTemplate(templateId);
            }

            if (e.target.matches('.template-category-btn')) {
                this.filterByCategory(e.target.dataset.category);
            }
        });

        // –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤
        document.addEventListener('input', (e) => {
            if (e.target.matches('#template-search')) {
                this.filterTemplates(e.target.value);
            }
        });

        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        document.addEventListener('keydown', (e) => {
            // Ctrl+Shift+T –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —à–∞–±–ª–æ–Ω–æ–≤
            if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'T') {
                e.preventDefault();
                this.toggleTemplatePanel();
            }

            // Ctrl+S –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
            if ((e.ctrlKey || e.metaKey) && e.key === 's' && e.shiftKey) {
                e.preventDefault();
                this.showSaveTemplateDialog();
            }
        });
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞–Ω–µ–ª–∏ —à–∞–±–ª–æ–Ω–æ–≤
     */
    toggleTemplatePanel() {
        const content = document.querySelector('.template-content');
        const button = document.querySelector('.toggle-templates-btn');

        if (!content) return;

        const isVisible = content.style.display !== 'none';

        if (isVisible) {
            content.style.display = 'none';
            button.innerHTML = '<i class="feather-icon" data-feather="folder"></i>';
            button.title = '–ü–æ–∫–∞–∑–∞—Ç—å —à–∞–±–ª–æ–Ω—ã';
        } else {
            content.style.display = 'block';
            button.innerHTML = '<i class="feather-icon" data-feather="folder-minus"></i>';
            button.title = '–°–∫—Ä—ã—Ç—å —à–∞–±–ª–æ–Ω—ã';
            this.renderTemplates(); // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –ø–æ–∫–∞–∑–µ
        }

        if (typeof feather !== 'undefined') {
            feather.replace();
        }
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
     */
    renderTemplates() {
        this.renderCategories();
        this.renderTemplateList();
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    renderCategories() {
        const container = document.querySelector('.template-categories');
        if (!container) return;

        const allTemplates = new Map([...this.templates, ...this.userTemplates]);
        const categories = new Set();

        // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        allTemplates.forEach(template => {
            if (template.category) {
                categories.add(template.category);
            }
        });

        const categoryButtons = Array.from(categories).map(category => {
            const count = Array.from(allTemplates.values()).filter(t => t.category === category).length;
            return `
                <button class="template-category-btn" data-category="${category}">
                    ${category} (${count})
                </button>
            `;
        }).join('');

        container.innerHTML = `
            <div class="category-buttons">
                <button class="template-category-btn active" data-category="">
                    –í—Å–µ (${allTemplates.size})
                </button>
                ${categoryButtons}
                <button class="template-category-btn" data-category="user">
                    –ú–æ–∏ (${this.userTemplates.size})
                </button>
            </div>
        `;
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
     */
    renderTemplateList(filter = '', category = '') {
        const container = document.querySelector('.template-list');
        if (!container) return;

        let templates = new Map([...this.templates, ...this.userTemplates]);

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (category) {
            if (category === 'user') {
                templates = this.userTemplates;
            } else {
                templates = new Map(
                    Array.from(templates).filter(([id, template]) => template.category === category)
                );
            }
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
        if (filter) {
            const filterLower = filter.toLowerCase();
            templates = new Map(
                Array.from(templates).filter(([id, template]) => {
                    return template.name.toLowerCase().includes(filterLower) ||
                           template.description.toLowerCase().includes(filterLower) ||
                           (template.tags && template.tags.some(tag => tag.toLowerCase().includes(filterLower)));
                })
            );
        }

        if (templates.size === 0) {
            container.innerHTML = `
                <div class="no-templates">
                    <p>üìù –®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                    <p>–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —à–∞–±–ª–æ–Ω!</p>
                </div>
            `;
            return;
        }

        const templateItems = Array.from(templates.entries()).map(([id, template]) => {
            const isUserTemplate = this.userTemplates.has(id);
            const paramsPreview = this.generateParamsPreview(template.params);

            return `
                <div class="template-item" data-template-id="${id}">
                    <div class="template-icon">${template.icon || 'üìÑ'}</div>
                    <div class="template-info">
                        <div class="template-name">
                            ${template.name}
                            ${isUserTemplate ? '<span class="user-badge">–ú–û–ô</span>' : ''}
                        </div>
                        <div class="template-description">${template.description}</div>
                        <div class="template-params">${paramsPreview}</div>
                        ${template.tags ? `
                            <div class="template-tags">
                                ${template.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
                            </div>
                        ` : ''}
                    </div>
                    <div class="template-actions">
                        ${isUserTemplate ? `
                            <button class="edit-template-btn" data-template-id="${id}" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                                <i class="feather-icon" data-feather="edit-2"></i>
                            </button>
                            <button class="delete-template-btn" data-template-id="${id}" title="–£–¥–∞–ª–∏—Ç—å">
                                <i class="feather-icon" data-feather="trash-2"></i>
                            </button>
                        ` : ''}
                        <button class="apply-template-btn" title="–ü—Ä–∏–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω">
                            <i class="feather-icon" data-feather="play"></i>
                        </button>
                    </div>
                </div>
            `;
        }).join('');

        container.innerHTML = templateItems;

        if (typeof feather !== 'undefined') {
            feather.replace();
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     */
    generateParamsPreview(params) {
        const keyParams = this.getKeyParameters(params);
        return keyParams.map(([key, value]) => {
            const label = this.getParameterLabel(key);
            const formatted = this.formatParameterValue(key, value);
            return `<span class="param-preview">${label}: ${formatted}</span>`;
        }).join(' ‚Ä¢ ');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
     */
    getKeyParameters(params) {
        const keyOrder = [
            'propertyPrice', 'loanAmount', 'interestRate', 'loanTerm',
            'monthlyRent', 'dailyRate', 'occupancyRate'
        ];

        const keyParams = [];
        const entries = Object.entries(params);

        // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        keyOrder.forEach(key => {
            const entry = entries.find(([k, v]) => k === key && typeof v === 'number' && v > 0);
            if (entry && keyParams.length < 3) {
                keyParams.push(entry);
            }
        });

        // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        if (keyParams.length < 3) {
            entries.forEach(([key, value]) => {
                if (keyParams.length >= 3) return;
                if (!keyParams.find(([k]) => k === key) && typeof value === 'number' && value > 0) {
                    keyParams.push([key, value]);
                }
            });
        }

        return keyParams;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
     */
    getParameterLabel(key) {
        const labels = {
            propertyPrice: '–°—Ç–æ–∏–º–æ—Å—Ç—å',
            loanAmount: '–ö—Ä–µ–¥–∏—Ç',
            interestRate: '–°—Ç–∞–≤–∫–∞',
            loanTerm: '–°—Ä–æ–∫',
            monthlyRent: '–ê—Ä–µ–Ω–¥–∞',
            dailyRate: '–ó–∞ —Å—É—Ç–∫–∏',
            occupancyRate: '–ó–∞–≥—Ä—É–∑–∫–∞',
            downPayment: '–í–∑–Ω–æ—Å'
        };

        return labels[key] || key;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
     */
    formatParameterValue(key, value) {
        if (key.includes('Rate') || key.includes('Percentage')) {
            return `${value}%`;
        }

        if (key.includes('Price') || key.includes('Amount') || key.includes('Payment') || key.includes('Rent')) {
            return this.formatMoney(value);
        }

        if (key.includes('Term') && key.includes('loan')) {
            return `${value} –ª–µ—Ç`;
        }

        return value.toString();
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—É–º–º
     */
    formatMoney(amount) {
        if (amount >= 1000000) {
            return `${(amount / 1000000).toFixed(1)}M ‚ÇΩ`;
        }
        if (amount >= 1000) {
            return `${Math.round(amount / 1000)}K ‚ÇΩ`;
        }
        return `${amount} ‚ÇΩ`;
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
     */
    applyTemplate(templateId) {
        const template = this.templates.get(templateId) || this.userTemplates.get(templateId);
        if (!template) {
            this.showNotification('–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            return;
        }

        try {
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞
            Object.entries(template.params).forEach(([key, value]) => {
                const input = document.querySelector(`#${key}, [name="${key}"]`);
                if (input) {
                    if (input.type === 'checkbox') {
                        input.checked = Boolean(value);
                    } else {
                        input.value = value;
                    }

                    // –í—ã–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Å—á–µ—Ç–∞
                    input.dispatchEvent(new Event('change', { bubbles: true }));
                    input.dispatchEvent(new Event('input', { bubbles: true }));
                }
            });

            this.showNotification(`–®–∞–±–ª–æ–Ω "${template.name}" –ø—Ä–∏–º–µ–Ω–µ–Ω`, 'success');

            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
            setTimeout(() => {
                this.triggerCalculation();
            }, 100);

            // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            if (window.gtag) {
                gtag('event', 'template_applied', {
                    template_id: templateId,
                    template_name: template.name,
                    calculator_type: this.currentCalculatorType
                });
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞', 'error');
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
     */
    triggerCalculation() {
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Ä–∞—Å—á–µ—Ç–∞
        const calculateBtn = document.querySelector('.calculate-btn, [onclick*="calculate"], button[type="submit"]');
        if (calculateBtn && !calculateBtn.disabled) {
            calculateBtn.click();
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
     */
    showSaveTemplateDialog() {
        const currentParams = this.extractCurrentParams();
        if (Object.keys(currentParams).length === 0) {
            this.showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞', 'warning');
            return;
        }

        const dialog = this.createSaveTemplateDialog(currentParams);
        document.body.appendChild(dialog);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
     */
    createSaveTemplateDialog(params) {
        const dialog = document.createElement('div');
        dialog.className = 'template-dialog-overlay';
        dialog.innerHTML = `
            <div class="template-dialog">
                <div class="dialog-header">
                    <h3>üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω</h3>
                    <button class="close-dialog-btn">&times;</button>
                </div>
                <div class="dialog-body">
                    <div class="form-group">
                        <label>–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:</label>
                        <input type="text" id="template-name-input" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—è –ø–µ—Ä–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞" maxlength="50" required>
                    </div>
                    <div class="form-group">
                        <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                        <textarea id="template-description-input" placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞" rows="3" maxlength="200"></textarea>
                    </div>
                    <div class="form-group">
                        <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
                        <select id="template-category-input">
                            <option value="–ú–æ–∏ —à–∞–±–ª–æ–Ω—ã">–ú–æ–∏ —à–∞–±–ª–æ–Ω—ã</option>
                            <option value="–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ</option>
                            <option value="–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ">–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ</option>
                            <option value="–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã">–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>–ò–∫–æ–Ω–∫–∞ (—ç–º–æ–¥–∑–∏):</label>
                        <input type="text" id="template-icon-input" placeholder="üìÑ" maxlength="2">
                        <div class="icon-suggestions">
                            <span class="icon-option" data-icon="üè†">üè†</span>
                            <span class="icon-option" data-icon="üí∞">üí∞</span>
                            <span class="icon-option" data-icon="üìä">üìä</span>
                            <span class="icon-option" data-icon="üéØ">üéØ</span>
                            <span class="icon-option" data-icon="‚≠ê">‚≠ê</span>
                            <span class="icon-option" data-icon="üí°">üí°</span>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):</label>
                        <input type="text" id="template-tags-input" placeholder="—Å–µ–º—å—è, –ø–µ—Ä–≤–æ–µ –∂–∏–ª—å–µ, —ç–∫–æ–Ω–æ–º–∏—è">
                    </div>
                    <div class="params-preview">
                        <h4>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:</h4>
                        <div class="params-list">
                            ${this.generateSaveParamsPreview(params)}
                        </div>
                    </div>
                </div>
                <div class="dialog-footer">
                    <button class="cancel-save-btn">–û—Ç–º–µ–Ω–∞</button>
                    <button class="confirm-save-btn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω</button>
                </div>
            </div>
        `;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–∏–∞–ª–æ–≥–∞
        dialog.addEventListener('click', (e) => {
            if (e.target.matches('.close-dialog-btn, .cancel-save-btn, .template-dialog-overlay')) {
                if (e.target === dialog || e.target.matches('.close-dialog-btn, .cancel-save-btn')) {
                    dialog.remove();
                }
            }

            if (e.target.matches('.confirm-save-btn')) {
                this.saveTemplate(params, dialog);
            }

            if (e.target.matches('.icon-option')) {
                document.getElementById('template-icon-input').value = e.target.dataset.icon;
            }
        });

        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –¥–∏–∞–ª–æ–≥
        dialog.querySelector('.template-dialog').addEventListener('click', (e) => {
            e.stopPropagation();
        });

        return dialog;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    generateSaveParamsPreview(params) {
        return Object.entries(params).map(([key, value]) => {
            const label = this.getParameterLabel(key);
            const formatted = this.formatParameterValue(key, value);
            return `<div class="param-item">${label}: <strong>${formatted}</strong></div>`;
        }).join('');
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
     */
    extractCurrentParams() {
        const params = {};
        const inputs = document.querySelectorAll('input[type="number"], input[type="range"], select, input[type="checkbox"]');

        inputs.forEach(input => {
            if (input.id || input.name) {
                const key = input.id || input.name;

                if (input.type === 'checkbox') {
                    if (input.checked) {
                        params[key] = true;
                    }
                } else if (input.type === 'number' || input.type === 'range') {
                    const value = parseFloat(input.value);
                    if (!isNaN(value) && value !== 0) {
                        params[key] = value;
                    }
                } else if (input.value && input.value !== '') {
                    params[key] = input.value;
                }
            }
        });

        return params;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
     */
    saveTemplate(params, dialog) {
        const name = document.getElementById('template-name-input').value.trim();
        const description = document.getElementById('template-description-input').value.trim();
        const category = document.getElementById('template-category-input').value;
        const icon = document.getElementById('template-icon-input').value.trim() || 'üìÑ';
        const tagsStr = document.getElementById('template-tags-input').value.trim();

        if (!name) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞', 'warning');
            return;
        }

        const tags = tagsStr ? tagsStr.split(',').map(tag => tag.trim()).filter(tag => tag) : [];

        const templateId = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const template = {
            name,
            description: description || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —à–∞–±–ª–æ–Ω',
            category,
            icon,
            params,
            tags,
            createdAt: new Date().toISOString(),
            calculatorType: this.currentCalculatorType
        };

        this.userTemplates.set(templateId, template);
        this.saveUserTemplates();

        dialog.remove();
        this.showNotification(`–®–∞–±–ª–æ–Ω "${name}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω`, 'success');

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
        this.renderTemplates();

        // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        if (window.gtag) {
            gtag('event', 'template_created', {
                template_name: name,
                calculator_type: this.currentCalculatorType,
                params_count: Object.keys(params).length
            });
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
     */
    deleteTemplate(templateId) {
        const template = this.userTemplates.get(templateId);
        if (!template) return;

        if (confirm(`–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω "${template.name}"?`)) {
            this.userTemplates.delete(templateId);
            this.saveUserTemplates();
            this.renderTemplates();
            this.showNotification(`–®–∞–±–ª–æ–Ω "${template.name}" —É–¥–∞–ª–µ–Ω`, 'info');

            // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            if (window.gtag) {
                gtag('event', 'template_deleted', {
                    template_name: template.name,
                    calculator_type: this.currentCalculatorType
                });
            }
        }
    }

    /**
     * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
     */
    editTemplate(templateId) {
        const template = this.userTemplates.get(templateId);
        if (!template) return;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—é, –Ω–æ —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
        const dialog = this.createEditTemplateDialog(template, templateId);
        document.body.appendChild(dialog);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
     */
    createEditTemplateDialog(template, templateId) {
        const dialog = document.createElement('div');
        dialog.className = 'template-dialog-overlay';
        dialog.innerHTML = `
            <div class="template-dialog">
                <div class="dialog-header">
                    <h3>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω</h3>
                    <button class="close-dialog-btn">&times;</button>
                </div>
                <div class="dialog-body">
                    <div class="form-group">
                        <label>–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:</label>
                        <input type="text" id="edit-template-name-input" value="${template.name}" maxlength="50" required>
                    </div>
                    <div class="form-group">
                        <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                        <textarea id="edit-template-description-input" rows="3" maxlength="200">${template.description}</textarea>
                    </div>
                    <div class="form-group">
                        <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
                        <select id="edit-template-category-input">
                            <option value="–ú–æ–∏ —à–∞–±–ª–æ–Ω—ã" ${template.category === '–ú–æ–∏ —à–∞–±–ª–æ–Ω—ã' ? 'selected' : ''}>–ú–æ–∏ —à–∞–±–ª–æ–Ω—ã</option>
                            <option value="–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ" ${template.category === '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ' ? 'selected' : ''}>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ</option>
                            <option value="–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ" ${template.category === '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ' ? 'selected' : ''}>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ</option>
                            <option value="–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã" ${template.category === '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã' ? 'selected' : ''}>–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>–ò–∫–æ–Ω–∫–∞ (—ç–º–æ–¥–∑–∏):</label>
                        <input type="text" id="edit-template-icon-input" value="${template.icon}" maxlength="2">
                        <div class="icon-suggestions">
                            <span class="icon-option" data-icon="üè†">üè†</span>
                            <span class="icon-option" data-icon="üí∞">üí∞</span>
                            <span class="icon-option" data-icon="üìä">üìä</span>
                            <span class="icon-option" data-icon="üéØ">üéØ</span>
                            <span class="icon-option" data-icon="‚≠ê">‚≠ê</span>
                            <span class="icon-option" data-icon="üí°">üí°</span>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):</label>
                        <input type="text" id="edit-template-tags-input" value="${(template.tags || []).join(', ')}">
                    </div>
                </div>
                <div class="dialog-footer">
                    <button class="cancel-edit-btn">–û—Ç–º–µ–Ω–∞</button>
                    <button class="confirm-edit-btn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</button>
                </div>
            </div>
        `;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        dialog.addEventListener('click', (e) => {
            if (e.target.matches('.close-dialog-btn, .cancel-edit-btn, .template-dialog-overlay')) {
                if (e.target === dialog || e.target.matches('.close-dialog-btn, .cancel-edit-btn')) {
                    dialog.remove();
                }
            }

            if (e.target.matches('.confirm-edit-btn')) {
                this.updateTemplate(templateId, dialog);
            }

            if (e.target.matches('.icon-option')) {
                document.getElementById('edit-template-icon-input').value = e.target.dataset.icon;
            }
        });

        dialog.querySelector('.template-dialog').addEventListener('click', (e) => {
            e.stopPropagation();
        });

        return dialog;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
     */
    updateTemplate(templateId, dialog) {
        const name = document.getElementById('edit-template-name-input').value.trim();
        const description = document.getElementById('edit-template-description-input').value.trim();
        const category = document.getElementById('edit-template-category-input').value;
        const icon = document.getElementById('edit-template-icon-input').value.trim() || 'üìÑ';
        const tagsStr = document.getElementById('edit-template-tags-input').value.trim();

        if (!name) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞', 'warning');
            return;
        }

        const tags = tagsStr ? tagsStr.split(',').map(tag => tag.trim()).filter(tag => tag) : [];

        const existingTemplate = this.userTemplates.get(templateId);
        const updatedTemplate = {
            ...existingTemplate,
            name,
            description,
            category,
            icon,
            tags,
            updatedAt: new Date().toISOString()
        };

        this.userTemplates.set(templateId, updatedTemplate);
        this.saveUserTemplates();

        dialog.remove();
        this.showNotification(`–®–∞–±–ª–æ–Ω "${name}" –æ–±–Ω–æ–≤–ª–µ–Ω`, 'success');
        this.renderTemplates();
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    filterByCategory(category) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        document.querySelectorAll('.template-category-btn').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.category === category);
        });

        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
        const searchValue = document.getElementById('template-search')?.value || '';
        this.renderTemplateList(searchValue, category);
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
     */
    filterTemplates(query) {
        const activeCategory = document.querySelector('.template-category-btn.active')?.dataset.category || '';
        this.renderTemplateList(query, activeCategory);
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤
     */
    exportUserTemplates() {
        if (this.userTemplates.size === 0) {
            this.showNotification('–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞', 'info');
            return;
        }

        const exportData = {
            version: '1.0',
            exportDate: new Date().toISOString(),
            calculatorType: this.currentCalculatorType,
            templates: Object.fromEntries(this.userTemplates)
        };

        const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);

        const a = document.createElement('a');
        a.href = url;
        a.download = `m2_templates_${this.currentCalculatorType}_${Date.now()}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);

        this.showNotification('–®–∞–±–ª–æ–Ω—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
    }

    /**
     * –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤
     */
    importUserTemplates() {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = '.json';

        input.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = (e) => {
                try {
                    const importData = JSON.parse(e.target.result);

                    if (importData.templates) {
                        let importedCount = 0;

                        Object.entries(importData.templates).forEach(([id, template]) => {
                            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
                            const newId = `imported_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
                            this.userTemplates.set(newId, {
                                ...template,
                                importedAt: new Date().toISOString()
                            });
                            importedCount++;
                        });

                        this.saveUserTemplates();
                        this.renderTemplates();

                        this.showNotification(`–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedCount} —à–∞–±–ª–æ–Ω–æ–≤`, 'success');
                    } else {
                        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
                    this.showNotification('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —à–∞–±–ª–æ–Ω–æ–≤', 'error');
                }
            };

            reader.readAsText(file);
        });

        input.click();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤
     */
    getTemplateStats() {
        return {
            totalTemplates: this.templates.size + this.userTemplates.size,
            defaultTemplates: this.templates.size,
            userTemplates: this.userTemplates.size,
            calculatorType: this.currentCalculatorType,
            categories: this.getCategories()
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    getCategories() {
        const allTemplates = new Map([...this.templates, ...this.userTemplates]);
        const categories = new Set();

        allTemplates.forEach(template => {
            if (template.category) {
                categories.add(template.category);
            }
        });

        return Array.from(categories);
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    showNotification(message, type = 'info') {
        if (window.scenarioComparison?.showNotification) {
            window.scenarioComparison.showNotification(message, type);
        } else {
            console.log(`${type.toUpperCase()}: ${message}`);
        }
    }
}

// CSS —Å—Ç–∏–ª–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —à–∞–±–ª–æ–Ω–æ–≤
const templateStyles = `
<style>
.template-panel {
    background: #f8f9fa;
    border: 1px solid #e9ecef;
    border-radius: 12px;
    margin-bottom: 20px;
    overflow: hidden;
    transition: all 0.3s ease;
}

.template-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 15px 20px;
    background: linear-gradient(135deg, #3416b6, #5a67d8);
    color: white;
}

.template-header h3 {
    margin: 0;
    font-size: 1.1em;
    color: white;
}

.template-actions {
    display: flex;
    gap: 10px;
}

.toggle-templates-btn,
.save-template-btn {
    background: rgba(255, 255, 255, 0.2);
    color: white;
    border: 1px solid rgba(255, 255, 255, 0.3);
    padding: 6px 12px;
    border-radius: 6px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 6px;
    font-size: 0.9em;
    transition: all 0.2s;
}

.toggle-templates-btn:hover,
.save-template-btn:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: translateY(-1px);
}

.template-content {
    padding: 20px;
}

.template-search {
    position: relative;
    margin-bottom: 15px;
}

.template-search input {
    width: 100%;
    padding: 10px 12px 10px 40px;
    border: 1px solid #ddd;
    border-radius: 8px;
    font-size: 0.9em;
}

.template-search .feather-icon {
    position: absolute;
    left: 12px;
    top: 50%;
    transform: translateY(-50%);
    color: #6c757d;
    pointer-events: none;
}

.category-buttons {
    display: flex;
    gap: 8px;
    margin-bottom: 15px;
    flex-wrap: wrap;
}

.template-category-btn {
    background: #e9ecef;
    color: #495057;
    border: 1px solid #ced4da;
    padding: 6px 12px;
    border-radius: 20px;
    cursor: pointer;
    font-size: 0.85em;
    transition: all 0.2s;
}

.template-category-btn:hover {
    background: #dee2e6;
    transform: translateY(-1px);
}

.template-category-btn.active {
    background: #3416b6;
    color: white;
    border-color: #3416b6;
}

.template-list {
    max-height: 400px;
    overflow-y: auto;
}

.template-item {
    display: flex;
    align-items: center;
    padding: 15px;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    margin-bottom: 10px;
    background: white;
    cursor: pointer;
    transition: all 0.2s;
}

.template-item:hover {
    border-color: #3416b6;
    box-shadow: 0 2px 8px rgba(52, 22, 182, 0.1);
    transform: translateY(-1px);
}

.template-icon {
    font-size: 24px;
    margin-right: 15px;
    text-align: center;
    min-width: 40px;
}

.template-info {
    flex: 1;
}

.template-name {
    font-weight: 600;
    color: #212529;
    margin-bottom: 4px;
    display: flex;
    align-items: center;
    gap: 8px;
}

.user-badge {
    background: #28a745;
    color: white;
    font-size: 0.7em;
    padding: 2px 6px;
    border-radius: 10px;
    font-weight: normal;
}

.template-description {
    color: #6c757d;
    font-size: 0.9em;
    margin-bottom: 6px;
}

.template-params {
    font-size: 0.8em;
    color: #495057;
    margin-bottom: 6px;
}

.param-preview {
    background: #f8f9fa;
    padding: 2px 6px;
    border-radius: 4px;
    margin-right: 6px;
}

.template-tags {
    display: flex;
    gap: 4px;
    flex-wrap: wrap;
}

.tag {
    background: #e3f2fd;
    color: #1976d2;
    font-size: 0.75em;
    padding: 2px 6px;
    border-radius: 10px;
}

.template-actions {
    display: flex;
    gap: 5px;
    margin-left: 10px;
}

.edit-template-btn,
.delete-template-btn,
.apply-template-btn {
    background: none;
    border: 1px solid #dee2e6;
    width: 32px;
    height: 32px;
    border-radius: 6px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s;
}

.edit-template-btn:hover {
    background: #17a2b8;
    color: white;
    border-color: #17a2b8;
}

.delete-template-btn:hover {
    background: #dc3545;
    color: white;
    border-color: #dc3545;
}

.apply-template-btn:hover {
    background: #28a745;
    color: white;
    border-color: #28a745;
}

.no-templates {
    text-align: center;
    padding: 40px 20px;
    color: #6c757d;
}

.no-templates p:first-child {
    font-size: 1.1em;
    margin-bottom: 5px;
}

/* –î–∏–∞–ª–æ–≥–∏ */
.template-dialog-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    z-index: 10000;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 20px;
}

.template-dialog {
    background: white;
    border-radius: 12px;
    max-width: 600px;
    width: 100%;
    max-height: 80vh;
    overflow-y: auto;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
}

.dialog-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 20px;
    border-bottom: 1px solid #e9ecef;
    background: linear-gradient(135deg, #3416b6, #5a67d8);
    color: white;
    border-radius: 12px 12px 0 0;
}

.dialog-header h3 {
    margin: 0;
    color: white;
}

.close-dialog-btn {
    background: none;
    border: none;
    color: white;
    font-size: 24px;
    cursor: pointer;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: background 0.2s;
}

.close-dialog-btn:hover {
    background: rgba(255, 255, 255, 0.2);
}

.dialog-body {
    padding: 20px;
}

.form-group {
    margin-bottom: 20px;
}

.form-group label {
    display: block;
    margin-bottom: 6px;
    font-weight: 500;
    color: #495057;
}

.form-group input,
.form-group textarea,
.form-group select {
    width: 100%;
    padding: 10px 12px;
    border: 1px solid #ced4da;
    border-radius: 6px;
    font-size: 0.9em;
    transition: border-color 0.2s;
}

.form-group input:focus,
.form-group textarea:focus,
.form-group select:focus {
    outline: none;
    border-color: #3416b6;
    box-shadow: 0 0 0 0.2rem rgba(52, 22, 182, 0.25);
}

.icon-suggestions {
    display: flex;
    gap: 8px;
    margin-top: 8px;
}

.icon-option {
    display: inline-block;
    padding: 8px;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    cursor: pointer;
    font-size: 16px;
    transition: all 0.2s;
}

.icon-option:hover {
    background: #f8f9fa;
    border-color: #3416b6;
    transform: scale(1.1);
}

.params-preview {
    background: #f8f9fa;
    padding: 15px;
    border-radius: 8px;
    margin-top: 15px;
}

.params-preview h4 {
    margin: 0 0 10px 0;
    font-size: 0.95em;
    color: #495057;
}

.params-list {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 8px;
}

.param-item {
    background: white;
    padding: 8px 10px;
    border-radius: 4px;
    font-size: 0.85em;
    border-left: 3px solid #3416b6;
}

.dialog-footer {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    padding: 20px;
    border-top: 1px solid #e9ecef;
    background: #f8f9fa;
    border-radius: 0 0 12px 12px;
}

.cancel-save-btn,
.cancel-edit-btn {
    background: #6c757d;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 6px;
    cursor: pointer;
    transition: background 0.2s;
}

.cancel-save-btn:hover,
.cancel-edit-btn:hover {
    background: #545b62;
}

.confirm-save-btn,
.confirm-edit-btn {
    background: #28a745;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 6px;
    cursor: pointer;
    transition: background 0.2s;
}

.confirm-save-btn:hover,
.confirm-edit-btn:hover {
    background: #218838;
}

/* –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ */
[data-theme="dark"] .template-panel {
    background: var(--bg-secondary);
    border-color: var(--border-color);
}

[data-theme="dark"] .template-content {
    color: var(--text-primary);
}

[data-theme="dark"] .template-item {
    background: var(--card-bg);
    border-color: var(--border-color);
    color: var(--text-primary);
}

[data-theme="dark"] .template-dialog {
    background: var(--card-bg);
    color: var(--text-primary);
}

[data-theme="dark"] .dialog-footer {
    background: var(--bg-tertiary);
    border-color: var(--border-color);
}

[data-theme="dark"] .params-preview,
[data-theme="dark"] .param-item {
    background: var(--bg-tertiary);
}

/* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
@media (max-width: 768px) {
    .template-header {
        flex-direction: column;
        align-items: stretch;
        gap: 10px;
    }

    .template-actions {
        justify-content: center;
    }

    .template-item {
        flex-direction: column;
        align-items: stretch;
        text-align: center;
    }

    .template-icon {
        margin: 0 0 10px 0;
        align-self: center;
    }

    .template-actions {
        justify-content: center;
        margin-top: 10px;
        margin-left: 0;
    }

    .category-buttons {
        justify-content: center;
    }

    .template-dialog {
        margin: 10px;
        max-width: none;
    }

    .params-list {
        grid-template-columns: 1fr;
    }
}
</style>
`;

// –ò–Ω—ä–µ–∫—Ü–∏—è —Å—Ç–∏–ª–µ–π
if (!document.querySelector('#template-styles')) {
    const styleElement = document.createElement('div');
    styleElement.id = 'template-styles';
    styleElement.innerHTML = templateStyles;
    document.head.appendChild(styleElement.firstElementChild);
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.CalculationTemplates = CalculationTemplates;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        window.calculationTemplates = new CalculationTemplates();
        window.calculationTemplates.init();
    });
} else {
    setTimeout(() => {
        window.calculationTemplates = new CalculationTemplates();
        window.calculationTemplates.init();
    }, 0);
}

export { CalculationTemplates };